------- FILE F:\WorkSpace\bAtari_BASIC\newgame_v.2\hero_preview.bas.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE F:\WorkSpace\bAtari_BASIC\newgame_v.2\hero_preview.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE F:\WorkSpace\bAtari_BASIC\newgame_v.2\hero_preview.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 01	    PFcolors   =	1
      4  10000 ????		00 01	    player1colors =	1
      5  10000 ????		00 01	    player1colors =	1
      6  10000 ????		00 01	    playercolors =	1
------- FILE 2600basic.h
      5  10000 ????
      6  10000 ????		00 80	    player0x   =	$80
      7  10000 ????		00 81	    player1x   =	$81
      8  10000 ????		00 82	    missile0x  =	$82
      9  10000 ????		00 83	    missile1x  =	$83
     10  10000 ????		00 84	    ballx      =	$84
     11  10000 ????
     12  10000 ????		00 85	    objecty    =	$85
     13  10000 ????		00 85	    player0y   =	$85
     14  10000 ????		00 86	    player1y   =	$86
     15  10000 ????		00 87	    missile1height =	$87
     16  10000 ????		00 88	    missile1y  =	$88
     17  10000 ????		00 89	    bally      =	$89
     18  10000 ????
     19  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     20  10000 ????
     21  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     22  10000 ????		00 8a	    player0pointerlo =	$8A
     23  10000 ????		00 8b	    player0pointerhi =	$8B
     24  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     25  10000 ????		00 8c	    player1pointerlo =	$8C
     26  10000 ????		00 8d	    player1pointerhi =	$8D
     27  10000 ????
     28  10000 ????		00 8e	    player0height =	$8E
     29  10000 ????		00 8f	    player1height =	$8F
     30  10000 ????		00 90	    missile0height =	$90
     31  10000 ????		00 91	    missile0y  =	$91
     32  10000 ????		00 92	    ballheight =	$92
     33  10000 ????
     34  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     36  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     37  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     38  10000 ????
     39  10000 ????		00 93	    score      =	$93	; $93-$95
     40  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     41  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     43  10000 ????		00 9e	    temp3      =	$9E
     44  10000 ????		00 9f	    temp4      =	$9F
     45  10000 ????		00 a0	    temp5      =	$A0
     46  10000 ????		00 a1	    temp6      =	$A1
     47  10000 ????
     48  10000 ????		00 a2	    rand       =	$A2
     49  10000 ????		00 a3	    scorecolor =	$A3
     50  10000 ????
     51  10000 ????		00 a4	    var0       =	$A4
     52  10000 ????		00 a5	    var1       =	$A5
     53  10000 ????		00 a6	    var2       =	$A6
     54  10000 ????		00 a7	    var3       =	$A7
     55  10000 ????		00 a8	    var4       =	$A8
     56  10000 ????		00 a9	    var5       =	$A9
     57  10000 ????		00 aa	    var6       =	$AA
     58  10000 ????		00 ab	    var7       =	$AB
     59  10000 ????		00 ac	    var8       =	$AC
     60  10000 ????		00 ad	    var9       =	$AD
     61  10000 ????		00 ae	    var10      =	$AE
     62  10000 ????		00 af	    var11      =	$AF
     63  10000 ????		00 b0	    var12      =	$B0
     64  10000 ????		00 b1	    var13      =	$B1
     65  10000 ????		00 b2	    var14      =	$B2
     66  10000 ????		00 b3	    var15      =	$B3
     67  10000 ????		00 b4	    var16      =	$B4
     68  10000 ????		00 b5	    var17      =	$B5
     69  10000 ????		00 b6	    var18      =	$B6
     70  10000 ????		00 b7	    var19      =	$B7
     71  10000 ????		00 b8	    var20      =	$B8
     72  10000 ????		00 b9	    var21      =	$B9
     73  10000 ????		00 ba	    var22      =	$BA
     74  10000 ????		00 bb	    var23      =	$BB
     75  10000 ????		00 bc	    var24      =	$BC
     76  10000 ????		00 bd	    var25      =	$BD
     77  10000 ????		00 be	    var26      =	$BE
     78  10000 ????		00 bf	    var27      =	$BF
     79  10000 ????		00 c0	    var28      =	$C0
     80  10000 ????		00 c1	    var29      =	$C1
     81  10000 ????		00 c2	    var30      =	$C2
     82  10000 ????		00 c3	    var31      =	$C3
     83  10000 ????		00 c4	    var32      =	$C4
     84  10000 ????		00 c5	    var33      =	$C5
     85  10000 ????		00 c6	    var34      =	$C6
     86  10000 ????		00 c7	    var35      =	$C7
     87  10000 ????		00 c8	    var36      =	$C8
     88  10000 ????		00 c9	    var37      =	$C9
     89  10000 ????		00 ca	    var38      =	$CA
     90  10000 ????		00 cb	    var39      =	$CB
     91  10000 ????		00 cc	    var40      =	$CC
     92  10000 ????		00 cd	    var41      =	$CD
     93  10000 ????		00 ce	    var42      =	$CE
     94  10000 ????		00 cf	    var43      =	$CF
     95  10000 ????		00 d0	    var44      =	$D0
     96  10000 ????		00 d1	    var45      =	$D1
     97  10000 ????		00 d2	    var46      =	$D2
     98  10000 ????		00 d3	    var47      =	$D3
     99  10000 ????
    100  10000 ????		00 d4	    A	       =	$d4
    101  10000 ????		00 d4	    a	       =	$d4
    102  10000 ????		00 d5	    B	       =	$d5
    103  10000 ????		00 d5	    b	       =	$d5
    104  10000 ????		00 d6	    C	       =	$d6
    105  10000 ????		00 d6	    c	       =	$d6
    106  10000 ????		00 d7	    D	       =	$d7
    107  10000 ????		00 d7	    d	       =	$d7
    108  10000 ????		00 d8	    E	       =	$d8
    109  10000 ????		00 d8	    e	       =	$d8
    110  10000 ????		00 d9	    F	       =	$d9
    111  10000 ????		00 d9	    f	       =	$d9
    112  10000 ????		00 da	    G	       =	$da
    113  10000 ????		00 da	    g	       =	$da
    114  10000 ????		00 db	    H	       =	$db
    115  10000 ????		00 db	    h	       =	$db
    116  10000 ????		00 dc	    I	       =	$dc
    117  10000 ????		00 dc	    i	       =	$dc
    118  10000 ????		00 dd	    J	       =	$dd
    119  10000 ????		00 dd	    j	       =	$dd
    120  10000 ????		00 de	    K	       =	$de
    121  10000 ????		00 de	    k	       =	$de
    122  10000 ????		00 df	    L	       =	$df
    123  10000 ????		00 df	    l	       =	$df
    124  10000 ????		00 e0	    M	       =	$e0
    125  10000 ????		00 e0	    m	       =	$e0
    126  10000 ????		00 e1	    N	       =	$e1
    127  10000 ????		00 e1	    n	       =	$e1
    128  10000 ????		00 e2	    O	       =	$e2
    129  10000 ????		00 e2	    o	       =	$e2
    130  10000 ????		00 e3	    P	       =	$e3
    131  10000 ????		00 e3	    p	       =	$e3
    132  10000 ????		00 e4	    Q	       =	$e4
    133  10000 ????		00 e4	    q	       =	$e4
    134  10000 ????		00 e5	    R	       =	$e5
    135  10000 ????		00 e5	    r	       =	$e5
    136  10000 ????		00 e6	    S	       =	$e6
    137  10000 ????		00 e6	    s	       =	$e6
    138  10000 ????		00 e7	    T	       =	$e7
    139  10000 ????		00 e7	    t	       =	$e7
    140  10000 ????		00 e8	    U	       =	$e8
    141  10000 ????		00 e8	    u	       =	$e8
    142  10000 ????		00 e9	    V	       =	$e9
    143  10000 ????		00 e9	    v	       =	$e9
    144  10000 ????		00 ea	    W	       =	$ea
    145  10000 ????		00 ea	    w	       =	$ea
    146  10000 ????		00 eb	    X	       =	$eb
    147  10000 ????		00 eb	    x	       =	$eb
    148  10000 ????		00 ec	    Y	       =	$ec
    149  10000 ????		00 ec	    y	       =	$ec
    150  10000 ????		00 ed	    Z	       =	$ed
    151  10000 ????		00 ed	    z	       =	$ed
    152  10000 ????
    153  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    154  10000 ????		00 ef	    playfieldpos =	$ef
    155  10000 ????
    156  10000 ????						; available for other uses, or if unused, provide more stack space
    157  10000 ????
    158  10000 ????		00 f0	    aux1       =	$f0
    159  10000 ????		00 f1	    aux2       =	$f1
    160  10000 ????		00 f2	    aux3       =	$f2
    161  10000 ????		00 f3	    aux4       =	$f3
    162  10000 ????		00 f4	    aux5       =	$f4
    163  10000 ????		00 f5	    aux6       =	$f5
    164  10000 ????
    165  10000 ????						; playfield color/height pointers
    166  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    167  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    168  10000 ????						; the above pointers are the same because if color and height are both used together,
    169  10000 ????						; they must used absolute indexed and cannot use pointers
    170  10000 ????
    171  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    172  10000 ????						; upper 3 bits of $f2 contain the number of lives
    173  10000 ????		00 f4	    lifecolor  =	$f4
    174  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    175  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  10000 ????
    177  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    178  10000 ????		00 f3	    pfscore2   =	$f3
    179  10000 ????		00 f4	    pfscorecolor =	$f4
    180  10000 ????
    181  10000 ????		00 f6	    stack1     =	$f6
    182  10000 ????		00 f7	    stack2     =	$f7
    183  10000 ????		00 f8	    stack3     =	$f8
    184  10000 ????		00 f9	    stack4     =	$f9
    185  10000 ????						; the stack bytes above may be used in the kernel
    186  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  10000 ????
    188  10000 ????				       MAC	return
    189  10000 ????				       ifnconst	bankswitch
    190  10000 ????				       rts
    191  10000 ????				       else
    192  10000 ????				       jmp	BS_return
    193  10000 ????				       endif
    194  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    195  10000 ????
    196  10000 ????			   -	       ifconst	superchip
    197  10000 ????			   -playfieldbase =	$10D0
    198  10000 ????			   -	       include	superchip.h
    199  10000 ????				       else
    200  10000 ????		00 a4	    playfieldbase =	$A4
    201  10000 ????				       endif
    202  10000 ????
    203  10000 ????				       ifnconst	pfhalfwidth
    204  10000 ????		00 04	    pfwidth    =	4
    205  10000 ????		00 0e	    PF1L       =	PF1
    206  10000 ????		00 0f	    PF2L       =	PF2
    207  10000 ????		00 0e	    PF1R       =	PF1
    208  10000 ????		00 0f	    PF2R       =	PF2
    209  10000 ????		00 00	    pfadjust   =	0
    210  10000 ????			   -	       else
    211  10000 ????			   -pfwidth    =	2
    212  10000 ????			   -	       ifconst	pfcenter
    213  10000 ????			   -PF1L       =	$3F	; no effect
    214  10000 ????			   -PF2L       =	PF2
    215  10000 ????			   -PF1R       =	$3F
    216  10000 ????			   -PF2R       =	PF2	; no effect
    217  10000 ????			   -pfadjust   =	1
    218  10000 ????			   -	       else
    219  10000 ????			   -PF1L       =	PF1
    220  10000 ????			   -PF2L       =	PF2
    221  10000 ????			   -PF1R       =	$3F	; no effect
    222  10000 ????			   -PF2R       =	$3F	; no effect
    223  10000 ????			   -pfadjust   =	0
    224  10000 ????			   -	       endif
    225  10000 ????				       endif
    226  10000 ????
    227  10000 ????						; define playfield start based on height
    228  10000 ????				       ifnconst	pfres
    229  10000 ????		00 a4	    playfield  =	playfieldbase
    230  10000 ????			   -	       else
    231  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  10000 ????				       endif
------- FILE F:\WorkSpace\bAtari_BASIC\newgame_v.2\hero_preview.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 01	    PFcolors   =	1
      4  10000 ????		00 01	    player1colors =	1
      5  10000 ????		00 01	    player1colors =	1
      6  10000 ????		00 01	    playercolors =	1
------- FILE F:\WorkSpace\bAtari_BASIC\newgame_v.2\hero_preview.bas.asm
      6  10000 ????			   -	       ifconst	bankswitch
      7  10000 ????			   -	       if	bankswitch == 8
      8  10000 ????			   -	       ORG	$1000
      9  10000 ????			   -	       RORG	$D000
     10  10000 ????			   -	       endif
     11  10000 ????			   -	       if	bankswitch == 16
     12  10000 ????			   -	       ORG	$1000
     13  10000 ????			   -	       RORG	$9000
     14  10000 ????			   -	       endif
     15  10000 ????			   -	       if	bankswitch == 32
     16  10000 ????			   -	       ORG	$1000
     17  10000 ????			   -	       RORG	$1000
     18  10000 ????			   -	       endif
     19  10000 ????			   -	       if	bankswitch == 64
     20  10000 ????			   -	       ORG	$1000
     21  10000 ????			   -	       RORG	$1000
     22  10000 ????			   -	       endif
     23  10000 ????				       else
     24  f000					      ORG	$F000
     25  f000					      endif
     26  f000
     27  f000				  -	      ifconst	bankswitch_hotspot
     28  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  f000				  -	      .byte	0	; stop unexpected bankswitches
     30  f000				  -	      endif
     31  f000					      endif
     32  f000				   start
     33  f000		       78		      sei
     34  f001		       d8		      cld
     35  f002		       a0 00		      ldy	#0
     36  f004		       a5 d0		      lda	$D0
     37  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     38  f008		       d0 07		      bne	MachineIs2600
     39  f00a		       a5 d1		      lda	$D1
     40  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     41  f00e		       d0 01		      bne	MachineIs2600
     42  f010		       88		      dey
     43  f011				   MachineIs2600
     44  f011		       a2 00		      ldx	#0
     45  f013		       8a		      txa
     46  f014				   clearmem
     47  f014		       e8		      inx
     48  f015		       9a		      txs
     49  f016		       48		      pha
     50  f017		       d0 fb		      bne	clearmem
     51  f019		       84 9c		      sty	temp1
     52  f01b					      ifnconst	multisprite
     53  f01b				  -	      ifconst	pfrowheight
     54  f01b				  -	      lda	#pfrowheight
     55  f01b					      else
     56  f01b				  -	      ifconst	pfres
     57  f01b				  -	      lda	#(96/pfres)
     58  f01b					      else
     59  f01b		       a9 08		      lda	#8
     60  f01d					      endif
     61  f01d					      endif
     62  f01d		       85 ef		      sta	playfieldpos
     63  f01f					      endif
     64  f01f		       a2 05		      ldx	#5
     65  f021				   initscore
     66  f021		       a9 9c		      lda	#<scoretable
     67  f023		       95 96		      sta	scorepointers,x
     68  f025		       ca		      dex
     69  f026		       10 f9		      bpl	initscore
     70  f028		       a9 01		      lda	#1
     71  f02a		       85 0a		      sta	CTRLPF
     72  f02c		       0d 84 02 	      ora	INTIM
     73  f02f		       85 a2		      sta	rand
     74  f031
     75  f031				  -	      ifconst	multisprite
     76  f031				  -	      jsr	multisprite_setup
     77  f031					      endif
     78  f031
     79  f031					      ifnconst	bankswitch
     80  f031		       4c 5a f4 	      jmp	game
     81  f034				  -	      else
     82  f034				  -	      lda	#>(game-1)
     83  f034				  -	      pha
     84  f034				  -	      lda	#<(game-1)
     85  f034				  -	      pha
     86  f034				  -	      pha
     87  f034				  -	      pha
     88  f034				  -	      ldx	#1
     89  f034				  -	      jmp	BS_jsr
     90  f034					      endif
     91  f034							; This is a 2-line kernel!
     92  f034					      ifnconst	vertical_reflect
     93  f034				   kernel
     94  f034					      endif
     95  f034		       85 02		      sta	WSYNC
     96  f036		       a9 ff		      lda	#255
     97  f038		       8d 96 02 	      sta	TIM64T
     98  f03b
     99  f03b		       a9 01		      lda	#1
    100  f03d		       85 27		      sta	VDELBL
    101  f03f		       85 25		      sta	VDELP0
    102  f041		       a6 92		      ldx	ballheight
    103  f043		       e8		      inx
    104  f044		       e8		      inx
    105  f045		       86 9f		      stx	temp4
    106  f047		       a5 86		      lda	player1y
    107  f049		       85 9e		      sta	temp3
    108  f04b
    109  f04b				  -	      ifconst	shakescreen
    110  f04b				  -	      jsr	doshakescreen
    111  f04b					      else
    112  f04b		       a6 90		      ldx	missile0height
    113  f04d		       e8		      inx
    114  f04e					      endif
    115  f04e
    116  f04e		       e8		      inx
    117  f04f		       86 f6		      stx	stack1
    118  f051
    119  f051		       a5 89		      lda	bally
    120  f053		       85 f7		      sta	stack2
    121  f055
    122  f055		       a5 85		      lda	player0y
    123  f057		       a2 00		      ldx	#0
    124  f059		       85 02		      sta	WSYNC
    125  f05b		       86 1b		      stx	GRP0
    126  f05d		       86 1c		      stx	GRP1
    127  f05f		       86 0e		      stx	PF1L
    128  f061		       86 0f		      stx	PF2
    129  f063		       86 2c		      stx	CXCLR
    130  f065				  -	      ifconst	readpaddle
    131  f065				  -	      stx	paddle
    132  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    134  f067					      endif
    135  f067
    136  f067		       95 9d		      sta	temp2,x
    137  f069
    138  f069							;store these so they can be retrieved later
    139  f069					      ifnconst	pfres
    140  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    141  f06b				  -	      else
    142  f06b				  -	      ldx	#132-pfres*pfwidth
    143  f06b					      endif
    144  f06b
    145  f06b		       c6 85		      dec	player0y
    146  f06d
    147  f06d		       a5 91		      lda	missile0y
    148  f06f		       85 a0		      sta	temp5
    149  f071		       a5 88		      lda	missile1y
    150  f073		       85 a1		      sta	temp6
    151  f075
    152  f075		       a5 ef		      lda	playfieldpos
    153  f077		       85 9c		      sta	temp1
    154  f079
    155  f079				  -	      ifconst	pfrowheight
    156  f079				  -	      lda	#pfrowheight+2
    157  f079					      else
    158  f079					      ifnconst	pfres
    159  f079		       a9 0a		      lda	#10
    160  f07b				  -	      else
    161  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    162  f07b					      endif
    163  f07b					      endif
    164  f07b		       18		      clc
    165  f07c		       e5 ef		      sbc	playfieldpos
    166  f07e		       85 ef		      sta	playfieldpos
    167  f080		       4c a8 f0 	      jmp	.startkernel
    168  f083
    169  f083				   .skipDrawP0
    170  f083		       a9 00		      lda	#0
    171  f085		       a8		      tay
    172  f086		       4c d7 f0 	      jmp	.continueP0
    173  f089
    174  f089				   .skipDrawP1
    175  f089		       a9 00		      lda	#0
    176  f08b		       a8		      tay
    177  f08c		       4c b2 f0 	      jmp	.continueP1
    178  f08f
    179  f08f				   .kerloop		; enter at cycle 59??
    180  f08f
    181  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    183  f090				   continuekernel2
    184  f090		       a5 92		      lda	ballheight
    185  f092
    186  f092				  -	      ifconst	pfres
    187  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    188  f092				  -	      sty	PF1L	;3
    189  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    190  f092				  -	      sty	PF2L	;3
    191  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    192  f092				  -	      sty	PF1R	; 3 too early?
    193  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    194  f092				  -	      sty	PF2R	;3
    195  f092					      else
    196  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    197  f094		       84 0e		      sty	PF1L	;3
    198  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    199  f098		       84 0f		      sty	PF2L	;3
    200  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    201  f09c		       84 0e		      sty	PF1R	; 3 too early?
    202  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    203  f0a0		       84 0f		      sty	PF2R	;3
    204  f0a2					      endif
    205  f0a2
    206  f0a2							; should be playfield+$38 for width=2
    207  f0a2
    208  f0a2		       c7 89		      dcp	bally
    209  f0a4		       2a		      rol
    210  f0a5		       2a		      rol
    211  f0a6							; rol
    212  f0a6							; rol
    213  f0a6				   goback
    214  f0a6		       85 1f		      sta	ENABL
    215  f0a8				   .startkernel
    216  f0a8		       a5 8f		      lda	player1height	;3
    217  f0aa		       c7 86		      dcp	player1y	;5
    218  f0ac		       90 db		      bcc	.skipDrawP1	;2
    219  f0ae		       a4 86		      ldy	player1y	;3
    220  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    221  f0b2							; so it doesn't cross a page boundary!
    222  f0b2
    223  f0b2				   .continueP1
    224  f0b2		       85 1c		      sta	GRP1	;3
    225  f0b4
    226  f0b4				  -	      ifnconst	player1colors
    227  f0b4				  -	      lda	missile1height	;3
    228  f0b4				  -	      dcp	missile1y	;5
    229  f0b4				  -	      rol		;2
    230  f0b4				  -	      rol		;2
    231  f0b4				  -	      sta	ENAM1	;3
    232  f0b4					      else
    233  f0b4		       b1 87		      lda	(player1color),y
    234  f0b6		       85 07		      sta	COLUP1
    235  f0b8				  -	      ifnconst	playercolors
    236  f0b8				  -	      sleep	7
    237  f0b8					      else
    238  f0b8		       ad 82 00 	      lda.w	player0colorstore
    239  f0bb		       85 06		      sta	COLUP0
    240  f0bd					      endif
    241  f0bd					      endif
    242  f0bd
    243  f0bd				  -	      ifconst	pfres
    244  f0bd				  -	      lda	playfield+pfres*pfwidth-132,x
    245  f0bd				  -	      sta	PF1L	;3
    246  f0bd				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    247  f0bd				  -	      sta	PF2L	;3
    248  f0bd				  -	      lda	playfield+pfres*pfwidth-129,x
    249  f0bd				  -	      sta	PF1R	; 3 too early?
    250  f0bd				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    251  f0bd				  -	      sta	PF2R	;3
    252  f0bd					      else
    253  f0bd		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    254  f0bf		       85 0e		      sta	PF1L	;3
    255  f0c1		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    256  f0c3		       85 0f		      sta	PF2L	;3
    257  f0c5		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    258  f0c7		       85 0e		      sta	PF1R	; 3 too early?
    259  f0c9		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    260  f0cb		       85 0f		      sta	PF2R	;3
    261  f0cd					      endif
    262  f0cd							; sleep 3
    263  f0cd
    264  f0cd		       a5 8e		      lda	player0height
    265  f0cf		       c7 85		      dcp	player0y
    266  f0d1		       90 b0		      bcc	.skipDrawP0
    267  f0d3		       a4 85		      ldy	player0y
    268  f0d5		       b1 8a		      lda	(player0pointer),y
    269  f0d7				   .continueP0
    270  f0d7		       85 1b		      sta	GRP0
    271  f0d9
    272  f0d9					      ifnconst	no_blank_lines
    273  f0d9				  -	      ifnconst	playercolors
    274  f0d9				  -	      lda	missile0height	;3
    275  f0d9				  -	      dcp	missile0y	;5
    276  f0d9				  -	      sbc	stack1
    277  f0d9				  -	      sta	ENAM0	;3
    278  f0d9					      else
    279  f0d9		       b1 90		      lda	(player0color),y
    280  f0db		       85 82		      sta	player0colorstore
      0  f0dd					      sleep	6
      1  f0dd				   .CYCLES    SET	6
      2  f0dd
      3  f0dd				  -	      IF	.CYCLES < 2
      4  f0dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0dd				  -	      ERR
      6  f0dd					      ENDIF
      7  f0dd
      8  f0dd				  -	      IF	.CYCLES & 1
      9  f0dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0dd				  -	      nop	0
     11  f0dd				  -	      ELSE
     12  f0dd				  -	      bit	VSYNC
     13  f0dd				  -	      ENDIF
     14  f0dd				  -.CYCLES    SET	.CYCLES - 3
     15  f0dd					      ENDIF
     16  f0dd
     17  f0dd					      REPEAT	.CYCLES / 2
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     19  f0e0					      REPEND
    282  f0e0					      endif
    283  f0e0		       c6 9c		      dec	temp1
    284  f0e2		       d0 ab		      bne	continuekernel
    285  f0e4				  -	      else
    286  f0e4				  -	      dec	temp1
    287  f0e4				  -	      beq	altkernel2
    288  f0e4				  -	      ifconst	readpaddle
    289  f0e4				  -	      ldy	currentpaddle
    290  f0e4				  -	      lda	INPT0,y
    291  f0e4				  -	      bpl	noreadpaddle
    292  f0e4				  -	      inc	paddle
    293  f0e4				  -	      jmp	continuekernel2
    294  f0e4				  -noreadpaddle
    295  f0e4				  -	      sleep	2
    296  f0e4				  -	      jmp	continuekernel
    297  f0e4				  -	      else
    298  f0e4				  -	      ifnconst	playercolors
    299  f0e4				  -	      ifconst	PFcolors
    300  f0e4				  -	      txa
    301  f0e4				  -	      tay
    302  f0e4				  -	      lda	(pfcolortable),y
    303  f0e4				  -	      ifnconst	backgroundchange
    304  f0e4				  -	      sta	COLUPF
    305  f0e4				  -	      else
    306  f0e4				  -	      sta	COLUBK
    307  f0e4				  -	      endif
    308  f0e4				  -	      jmp	continuekernel
    309  f0e4				  -	      else
    310  f0e4				  -	      ifconst	kernelmacrodef
    311  f0e4				  -	      kernelmacro
    312  f0e4				  -	      else
    313  f0e4				  -	      sleep	12
    314  f0e4				  -	      endif
    315  f0e4				  -	      endif
    316  f0e4				  -	      else
    317  f0e4				  -	      lda	(player0color),y
    318  f0e4				  -	      sta	player0colorstore
    319  f0e4				  -	      sleep	4
    320  f0e4				  -	      endif
    321  f0e4				  -	      jmp	continuekernel
    322  f0e4				  -	      endif
    323  f0e4				  -altkernel2
    324  f0e4				  -	      txa
    325  f0e4				  -	      ifnconst	vertical_reflect
    326  f0e4				  -	      sbx	#256-pfwidth
    327  f0e4				  -	      else
    328  f0e4				  -	      sbx	#256-pfwidth/2
    329  f0e4				  -	      endif
    330  f0e4				  -	      bmi	lastkernelline
    331  f0e4				  -	      ifconst	pfrowheight
    332  f0e4				  -	      lda	#pfrowheight
    333  f0e4				  -	      else
    334  f0e4				  -	      ifnconst	pfres
    335  f0e4				  -	      lda	#8
    336  f0e4				  -	      else
    337  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    338  f0e4				  -	      endif
    339  f0e4				  -	      endif
    340  f0e4				  -	      sta	temp1
    341  f0e4				  -	      jmp	continuekernel
    342  f0e4					      endif
    343  f0e4
    344  f0e4				   altkernel
    345  f0e4
    346  f0e4				  -	      ifconst	PFmaskvalue
    347  f0e4				  -	      lda	#PFmaskvalue
    348  f0e4					      else
    349  f0e4		       a9 00		      lda	#0
    350  f0e6					      endif
    351  f0e6		       85 0e		      sta	PF1L
    352  f0e8		       85 0f		      sta	PF2
    353  f0ea
    354  f0ea
    355  f0ea							;sleep 3
    356  f0ea
    357  f0ea							;28 cycles to fix things
    358  f0ea							;minus 11=17
    359  f0ea
    360  f0ea							; lax temp4
    361  f0ea							; clc
    362  f0ea		       8a		      txa
    363  f0eb					      ifnconst	vertical_reflect
    364  f0eb		       cb fc		      sbx	#256-pfwidth
    365  f0ed				  -	      else
    366  f0ed				  -	      sbx	#256-pfwidth/2
    367  f0ed					      endif
    368  f0ed
    369  f0ed		       30 12		      bmi	lastkernelline
    370  f0ef
    371  f0ef				  -	      ifconst	PFcolorandheight
    372  f0ef				  -	      ifconst	pfres
    373  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    374  f0ef				  -	      else
    375  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    376  f0ef				  -	      endif
    377  f0ef				  -	      ifnconst	backgroundchange
    378  f0ef				  -	      sty	COLUPF
    379  f0ef				  -	      else
    380  f0ef				  -	      sty	COLUBK
    381  f0ef				  -	      endif
    382  f0ef				  -	      ifconst	pfres
    383  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    384  f0ef				  -	      else
    385  f0ef				  -	      lda	playfieldcolorandheight-88,x
    386  f0ef				  -	      endif
    387  f0ef				  -	      sta.w	temp1
    388  f0ef					      endif
    389  f0ef				  -	      ifconst	PFheights
    390  f0ef				  -	      lsr
    391  f0ef				  -	      lsr
    392  f0ef				  -	      tay
    393  f0ef				  -	      lda	(pfheighttable),y
    394  f0ef				  -	      sta.w	temp1
    395  f0ef					      endif
    396  f0ef					      ifconst	PFcolors
    397  f0ef		       a8		      tay
    398  f0f0		       b1 f0		      lda	(pfcolortable),y
    399  f0f2					      ifnconst	backgroundchange
    400  f0f2		       85 08		      sta	COLUPF
    401  f0f4				  -	      else
    402  f0f4				  -	      sta	COLUBK
    403  f0f4					      endif
    404  f0f4				  -	      ifconst	pfrowheight
    405  f0f4				  -	      lda	#pfrowheight
    406  f0f4					      else
    407  f0f4					      ifnconst	pfres
    408  f0f4		       a9 08		      lda	#8
    409  f0f6				  -	      else
    410  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    411  f0f6					      endif
    412  f0f6					      endif
    413  f0f6		       85 9c		      sta	temp1
    414  f0f8					      endif
    415  f0f8					      ifnconst	PFcolorandheight
    416  f0f8				  -	      ifnconst	PFcolors
    417  f0f8				  -	      ifnconst	PFheights
    418  f0f8				  -	      ifnconst	no_blank_lines
    419  f0f8				  -			; read paddle 0
    420  f0f8				  -			; lo-res paddle read
    421  f0f8				  -			; bit INPT0
    422  f0f8				  -			; bmi paddleskipread
    423  f0f8				  -			; inc paddle0
    424  f0f8				  -			;donepaddleskip
    425  f0f8				  -	      sleep	10
    426  f0f8				  -	      ifconst	pfrowheight
    427  f0f8				  -	      lda	#pfrowheight
    428  f0f8				  -	      else
    429  f0f8				  -	      ifnconst	pfres
    430  f0f8				  -	      lda	#8
    431  f0f8				  -	      else
    432  f0f8				  -	      lda	#(96/pfres)	; try to come close to the real size
    433  f0f8				  -	      endif
    434  f0f8				  -	      endif
    435  f0f8				  -	      sta	temp1
    436  f0f8				  -	      endif
    437  f0f8				  -	      endif
    438  f0f8					      endif
    439  f0f8					      endif
    440  f0f8
    441  f0f8
    442  f0f8		       a5 92		      lda	ballheight
    443  f0fa		       c7 89		      dcp	bally
    444  f0fc		       e5 9f		      sbc	temp4
    445  f0fe
    446  f0fe
    447  f0fe		       4c a6 f0 	      jmp	goback
    448  f101
    449  f101
    450  f101					      ifnconst	no_blank_lines
    451  f101				   lastkernelline
    452  f101				  -	      ifnconst	PFcolors
    453  f101				  -	      sleep	10
    454  f101					      else
    455  f101		       a0 7c		      ldy	#124
    456  f103		       b1 f0		      lda	(pfcolortable),y
    457  f105		       85 08		      sta	COLUPF
    458  f107					      endif
    459  f107
    460  f107				  -	      ifconst	PFheights
    461  f107				  -	      ldx	#1
    462  f107				  -			;sleep 4
    463  f107				  -	      sleep	3	; REVENG - this was over 1 cycle
    464  f107					      else
    465  f107		       a6 ef		      ldx	playfieldpos
    466  f109							;sleep 3
      0  f109					      sleep	2	; REVENG - this was over 1 cycle
      1  f109				   .CYCLES    SET	2
      2  f109
      3  f109				  -	      IF	.CYCLES < 2
      4  f109				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f109				  -	      ERR
      6  f109					      ENDIF
      7  f109
      8  f109				  -	      IF	.CYCLES & 1
      9  f109				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f109				  -	      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109				  -	      ENDIF
     14  f109				  -.CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109					      REPEAT	.CYCLES / 2
     18  f109		       ea		      nop
     19  f10a					      REPEND
    468  f10a					      endif
    469  f10a
    470  f10a		       4c 28 f1 	      jmp	enterlastkernel
    471  f10d
    472  f10d				  -	      else
    473  f10d				  -lastkernelline
    474  f10d				  -
    475  f10d				  -	      ifconst	PFheights
    476  f10d				  -	      ldx	#1
    477  f10d				  -			;sleep 5
    478  f10d				  -	      sleep	4	; REVENG - this was over 1 cycle
    479  f10d				  -	      else
    480  f10d				  -	      ldx	playfieldpos
    481  f10d				  -			;sleep 4
    482  f10d				  -	      sleep	3	; REVENG - this was over 1 cycle
    483  f10d				  -	      endif
    484  f10d				  -
    485  f10d				  -	      cpx	#0
    486  f10d				  -	      bne	.enterfromNBL
    487  f10d				  -	      jmp	no_blank_lines_bailout
    488  f10d					      endif
    489  f10d
    490  f10d				  -	      if	((<*)>$d5)
    491  f10d				  -	      align	256
    492  f10d					      endif
    493  f10d							; this is a kludge to prevent page wrapping - fix!!!
    494  f10d
    495  f10d				   .skipDrawlastP1
    496  f10d		       a9 00		      lda	#0
    497  f10f		       a8		      tay		; REVENG - added so we don't cross a page
    498  f110		       4c 3a f1 	      jmp	.continuelastP1
    499  f113
    500  f113				   .endkerloop		; enter at cycle 59??
    501  f113
    502  f113		       ea		      nop
    503  f114
    504  f114				   .enterfromNBL
    505  f114				  -	      ifconst	pfres
    506  f114				  -	      ldy.w	playfield+pfres*pfwidth-4
    507  f114				  -	      sty	PF1L	;3
    508  f114				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    509  f114				  -	      sty	PF2L	;3
    510  f114				  -	      ldy.w	playfield+pfres*pfwidth-1
    511  f114				  -	      sty	PF1R	; possibly too early?
    512  f114				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    513  f114				  -	      sty	PF2R	;3
    514  f114					      else
    515  f114		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    516  f117		       84 0e		      sty	PF1L	;3
    517  f119		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    518  f11c		       84 0f		      sty	PF2L	;3
    519  f11e		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    520  f121		       84 0e		      sty	PF1R	; possibly too early?
    521  f123		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    522  f126		       84 0f		      sty	PF2R	;3
    523  f128					      endif
    524  f128
    525  f128				   enterlastkernel
    526  f128		       a5 92		      lda	ballheight
    527  f12a
    528  f12a							; tya
    529  f12a		       c7 89		      dcp	bally
    530  f12c							; sleep 4
    531  f12c
    532  f12c							; sbc stack3
    533  f12c		       2a		      rol
    534  f12d		       2a		      rol
    535  f12e		       85 1f		      sta	ENABL
    536  f130
    537  f130		       a5 8f		      lda	player1height	;3
    538  f132		       c7 86		      dcp	player1y	;5
    539  f134		       90 d7		      bcc	.skipDrawlastP1
    540  f136		       a4 86		      ldy	player1y	;3
    541  f138		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    542  f13a							; so it doesn't cross a page boundary!
    543  f13a
    544  f13a				   .continuelastP1
    545  f13a		       85 1c		      sta	GRP1	;3
    546  f13c
    547  f13c				  -	      ifnconst	player1colors
    548  f13c				  -	      lda	missile1height	;3
    549  f13c				  -	      dcp	missile1y	;5
    550  f13c					      else
    551  f13c		       b1 87		      lda	(player1color),y
    552  f13e		       85 07		      sta	COLUP1
    553  f140					      endif
    554  f140
    555  f140		       ca		      dex
    556  f141							;dec temp4 ; might try putting this above PF writes
    557  f141		       f0 37		      beq	endkernel
    558  f143
    559  f143
    560  f143				  -	      ifconst	pfres
    561  f143				  -	      ldy.w	playfield+pfres*pfwidth-4
    562  f143				  -	      sty	PF1L	;3
    563  f143				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    564  f143				  -	      sty	PF2L	;3
    565  f143				  -	      ldy.w	playfield+pfres*pfwidth-1
    566  f143				  -	      sty	PF1R	; possibly too early?
    567  f143				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    568  f143				  -	      sty	PF2R	;3
    569  f143					      else
    570  f143		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    571  f146		       84 0e		      sty	PF1L	;3
    572  f148		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    573  f14b		       84 0f		      sty	PF2L	;3
    574  f14d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    575  f150		       84 0e		      sty	PF1R	; possibly too early?
    576  f152		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    577  f155		       84 0f		      sty	PF2R	;3
    578  f157					      endif
    579  f157
    580  f157				  -	      ifnconst	player1colors
    581  f157				  -	      rol		;2
    582  f157				  -	      rol		;2
    583  f157				  -	      sta	ENAM1	;3
    584  f157					      else
    585  f157				  -	      ifnconst	playercolors
    586  f157				  -	      sleep	7
    587  f157					      else
    588  f157		       ad 82 00 	      lda.w	player0colorstore
    589  f15a		       85 06		      sta	COLUP0
    590  f15c					      endif
    591  f15c					      endif
    592  f15c
    593  f15c		       ad 8e 00 	      lda.w	player0height
    594  f15f		       c7 85		      dcp	player0y
    595  f161		       90 11		      bcc	.skipDrawlastP0
    596  f163		       a4 85		      ldy	player0y
    597  f165		       b1 8a		      lda	(player0pointer),y
    598  f167				   .continuelastP0
    599  f167		       85 1b		      sta	GRP0
    600  f169
    601  f169
    602  f169
    603  f169					      ifnconst	no_blank_lines
    604  f169		       a5 90		      lda	missile0height	;3
    605  f16b		       c7 91		      dcp	missile0y	;5
    606  f16d		       e5 f6		      sbc	stack1
    607  f16f		       85 1d		      sta	ENAM0	;3
    608  f171		       4c 13 f1 	      jmp	.endkerloop
    609  f174				  -	      else
    610  f174				  -	      ifconst	readpaddle
    611  f174				  -	      ldy	currentpaddle
    612  f174				  -	      lda	INPT0,y
    613  f174				  -	      bpl	noreadpaddle2
    614  f174				  -	      inc	paddle
    615  f174				  -	      jmp	.endkerloop
    616  f174				  -noreadpaddle2
    617  f174				  -	      sleep	4
    618  f174				  -	      jmp	.endkerloop
    619  f174				  -	      else		; no_blank_lines and no paddle reading
    620  f174				  -	      pla
    621  f174				  -	      pha		; 14 cycles in 4 bytes
    622  f174				  -	      pla
    623  f174				  -	      pha
    624  f174				  -			; sleep 14
    625  f174				  -	      jmp	.endkerloop
    626  f174				  -	      endif
    627  f174					      endif
    628  f174
    629  f174
    630  f174							; ifconst donepaddleskip
    631  f174							;paddleskipread
    632  f174							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    633  f174							; plus we get a lo-res paddle read
    634  f174							; bmi donepaddleskip
    635  f174							; endif
    636  f174
    637  f174				   .skipDrawlastP0
    638  f174		       a9 00		      lda	#0
    639  f176		       a8		      tay
    640  f177		       4c 67 f1 	      jmp	.continuelastP0
    641  f17a
    642  f17a				  -	      ifconst	no_blank_lines
    643  f17a				  -no_blank_lines_bailout
    644  f17a				  -	      ldx	#0
    645  f17a					      endif
    646  f17a
    647  f17a				   endkernel
    648  f17a							; 6 digit score routine
    649  f17a		       86 0e		      stx	PF1
    650  f17c		       86 0f		      stx	PF2
    651  f17e		       86 0d		      stx	PF0
    652  f180		       18		      clc
    653  f181
    654  f181				  -	      ifconst	pfrowheight
    655  f181				  -	      lda	#pfrowheight+2
    656  f181					      else
    657  f181					      ifnconst	pfres
    658  f181		       a9 0a		      lda	#10
    659  f183				  -	      else
    660  f183				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    661  f183					      endif
    662  f183					      endif
    663  f183
    664  f183		       e5 ef		      sbc	playfieldpos
    665  f185		       85 ef		      sta	playfieldpos
    666  f187		       8a		      txa
    667  f188
    668  f188				  -	      ifconst	shakescreen
    669  f188				  -	      bit	shakescreen
    670  f188				  -	      bmi	noshakescreen2
    671  f188				  -	      ldx	#$3D
    672  f188				  -noshakescreen2
    673  f188					      endif
    674  f188
    675  f188		       95 02		      sta	WSYNC,x
    676  f18a
    677  f18a							; STA WSYNC ;first one, need one more
    678  f18a		       85 0b		      sta	REFP0
    679  f18c		       85 0c		      sta	REFP1
    680  f18e		       85 1b		      STA	GRP0
    681  f190		       85 1c		      STA	GRP1
    682  f192							; STA PF1
    683  f192							; STA PF2
    684  f192		       85 2b		      sta	HMCLR
    685  f194		       85 1d		      sta	ENAM0
    686  f196		       85 1e		      sta	ENAM1
    687  f198		       85 1f		      sta	ENABL
    688  f19a
    689  f19a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    690  f19c		       85 85		      sta	player0y
    691  f19e		       a5 9e		      lda	temp3
    692  f1a0		       85 86		      sta	player1y
    693  f1a2				  -	      ifnconst	player1colors
    694  f1a2				  -	      lda	temp6
    695  f1a2				  -	      sta	missile1y
    696  f1a2					      endif
    697  f1a2				  -	      ifnconst	playercolors
    698  f1a2				  -	      ifnconst	readpaddle
    699  f1a2				  -	      lda	temp5
    700  f1a2				  -	      sta	missile0y
    701  f1a2				  -	      endif
    702  f1a2					      endif
    703  f1a2		       a5 f7		      lda	stack2
    704  f1a4		       85 89		      sta	bally
    705  f1a6
    706  f1a6							; REVENG - strangely, this isn't required any more. might have
    707  f1a6							; resulted from the no_blank_lines score bounce fix
    708  f1a6							;ifconst no_blank_lines
    709  f1a6							;sta WSYNC
    710  f1a6							;endif
    711  f1a6
    712  f1a6		       ad 84 02 	      lda	INTIM
    713  f1a9		       18		      clc
    714  f1aa					      ifnconst	vblank_time
    715  f1aa		       69 8e		      adc	#43+12+87
    716  f1ac				  -	      else
    717  f1ac				  -	      adc	#vblank_time+12+87
    718  f1ac				  -
    719  f1ac					      endif
    720  f1ac							; sta WSYNC
    721  f1ac		       8d 96 02 	      sta	TIM64T
    722  f1af
    723  f1af				  -	      ifconst	minikernel
    724  f1af				  -	      jsr	minikernel
    725  f1af					      endif
    726  f1af
    727  f1af							; now reassign temp vars for score pointers
    728  f1af
    729  f1af							; score pointers contain:
    730  f1af							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    731  f1af							; swap lo2->temp1
    732  f1af							; swap lo4->temp3
    733  f1af							; swap lo6->temp5
    734  f1af					      ifnconst	noscore
    735  f1af		       a5 97		      lda	scorepointers+1
    736  f1b1							; ldy temp1
    737  f1b1		       85 9c		      sta	temp1
    738  f1b3							; sty scorepointers+1
    739  f1b3
    740  f1b3		       a5 99		      lda	scorepointers+3
    741  f1b5							; ldy temp3
    742  f1b5		       85 9e		      sta	temp3
    743  f1b7							; sty scorepointers+3
    744  f1b7
    745  f1b7
    746  f1b7		       85 2b		      sta	HMCLR
    747  f1b9		       ba		      tsx
    748  f1ba		       86 f6		      stx	stack1
    749  f1bc		       a2 e0		      ldx	#$E0
    750  f1be		       86 20		      stx	HMP0
    751  f1c0
    752  f1c0		       a5 a3		      LDA	scorecolor
    753  f1c2		       85 06		      STA	COLUP0
    754  f1c4		       85 07		      STA	COLUP1
    755  f1c6				  -	      ifconst	scorefade
    756  f1c6				  -	      STA	stack2
    757  f1c6					      endif
    758  f1c6				  -	      ifconst	pfscore
    759  f1c6				  -	      lda	pfscorecolor
    760  f1c6				  -	      sta	COLUPF
    761  f1c6					      endif
    762  f1c6		       85 02		      sta	WSYNC
    763  f1c8		       a2 00		      ldx	#0
    764  f1ca		       86 1b		      STx	GRP0
    765  f1cc		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    766  f1ce
    767  f1ce		       a5 9b		      lda	scorepointers+5
    768  f1d0							; ldy temp5
    769  f1d0		       95 a0		      sta	temp5,x
    770  f1d2							; sty scorepointers+5
    771  f1d2		       a9 ff		      lda	#>scoretable
    772  f1d4		       85 97		      sta	scorepointers+1
    773  f1d6		       85 99		      sta	scorepointers+3
    774  f1d8		       85 9b		      sta	scorepointers+5
    775  f1da		       85 9d		      sta	temp2
    776  f1dc		       85 9f		      sta	temp4
    777  f1de		       85 a1		      sta	temp6
    778  f1e0		       a0 07		      LDY	#7
    779  f1e2		       84 25		      STY	VDELP0
    780  f1e4		       85 10		      STA	RESP0
    781  f1e6		       85 11		      STA	RESP1
    782  f1e8
    783  f1e8
    784  f1e8		       a9 03		      LDA	#$03
    785  f1ea		       85 04		      STA	NUSIZ0
    786  f1ec		       85 05		      STA	NUSIZ1
    787  f1ee		       85 26		      STA	VDELP1
    788  f1f0		       a9 f0		      LDA	#$F0
    789  f1f2		       85 21		      STA	HMP1
    790  f1f4		       b1 96		      lda	(scorepointers),y
    791  f1f6		       85 1b		      sta	GRP0
    792  f1f8		       85 2a		      STA	HMOVE	; cycle 73 ?
    793  f1fa		       4c 08 f2 	      jmp	beginscore
    794  f1fd
    795  f1fd
    796  f1fd					      if	((<*)>$d4)
    797  f200		       00 00 00 	      align	256	; kludge that potentially wastes space! should be fixed!
    798  f200					      endif
    799  f200
    800  f200				   loop2
    801  f200		       b1 96		      lda	(scorepointers),y	;+5 68 204
    802  f202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    803  f204				  -	      ifconst	pfscore
    804  f204				  -	      lda.w	pfscore1
    805  f204				  -	      sta	PF1
    806  f204					      else
    807  f204				  -	      ifconst	scorefade
    808  f204				  -	      sleep	2
    809  f204				  -	      dec	stack2	; decrement the temporary scorecolor
    810  f204					      else
      0  f204					      sleep	7
      1  f204				   .CYCLES    SET	7
      2  f204
      3  f204				  -	      IF	.CYCLES < 2
      4  f204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f204				  -	      ERR
      6  f204					      ENDIF
      7  f204
      8  f204					      IF	.CYCLES & 1
      9  f204					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f204		       04 00		      nop	0
     11  f206				  -	      ELSE
     12  f206				  -	      bit	VSYNC
     13  f206					      ENDIF
     14  f206				   .CYCLES    SET	.CYCLES - 3
     15  f206					      ENDIF
     16  f206
     17  f206					      REPEAT	.CYCLES / 2
     18  f206		       ea		      nop
     17  f206					      REPEND
     18  f207		       ea		      nop
     19  f208					      REPEND
    812  f208					      endif
    813  f208					      endif
    814  f208							; cycle 0
    815  f208				   beginscore
    816  f208		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    817  f20a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    818  f20c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    819  f20e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    820  f210		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    821  f212		       9a		      txs
    822  f213		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    823  f215				  -	      ifconst	scorefade
    824  f215				  -	      lda	stack2
    825  f215					      else
      0  f215					      sleep	3
      1  f215				   .CYCLES    SET	3
      2  f215
      3  f215				  -	      IF	.CYCLES < 2
      4  f215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f215				  -	      ERR
      6  f215					      ENDIF
      7  f215
      8  f215					      IF	.CYCLES & 1
      9  f215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f215		       04 00		      nop	0
     11  f217				  -	      ELSE
     12  f217				  -	      bit	VSYNC
     13  f217					      ENDIF
     14  f217				   .CYCLES    SET	.CYCLES - 3
     15  f217					      ENDIF
     16  f217
     17  f217				  -	      REPEAT	.CYCLES / 2
     18  f217				  -	      nop
     19  f217					      REPEND
    827  f217					      endif
    828  f217
    829  f217				  -	      ifconst	pfscore
    830  f217				  -	      lda	pfscore2
    831  f217				  -	      sta	PF1
    832  f217					      else
    833  f217				  -	      ifconst	scorefade
    834  f217				  -	      sta	COLUP0
    835  f217				  -	      sta	COLUP1
    836  f217					      else
      0  f217					      sleep	6
      1  f217				   .CYCLES    SET	6
      2  f217
      3  f217				  -	      IF	.CYCLES < 2
      4  f217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f217				  -	      ERR
      6  f217					      ENDIF
      7  f217
      8  f217				  -	      IF	.CYCLES & 1
      9  f217				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f217				  -	      nop	0
     11  f217				  -	      ELSE
     12  f217				  -	      bit	VSYNC
     13  f217				  -	      ENDIF
     14  f217				  -.CYCLES    SET	.CYCLES - 3
     15  f217					      ENDIF
     16  f217
     17  f217					      REPEAT	.CYCLES / 2
     18  f217		       ea		      nop
     17  f217					      REPEND
     18  f218		       ea		      nop
     17  f218					      REPEND
     18  f219		       ea		      nop
     19  f21a					      REPEND
    838  f21a					      endif
    839  f21a					      endif
    840  f21a
    841  f21a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    842  f21c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    843  f21e		       ba		      tsx
    844  f21f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    845  f221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    846  f223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    847  f225		       88		      dey
    848  f226		       10 d8		      bpl	loop2	;+2 60 180
    849  f228
    850  f228		       a6 f6		      ldx	stack1
    851  f22a		       9a		      txs
    852  f22b							; lda scorepointers+1
    853  f22b		       a4 9c		      ldy	temp1
    854  f22d							; sta temp1
    855  f22d		       84 97		      sty	scorepointers+1
    856  f22f
    857  f22f		       a9 00		      LDA	#0
    858  f231		       85 0e		      sta	PF1
    859  f233		       85 1b		      STA	GRP0
    860  f235		       85 1c		      STA	GRP1
    861  f237		       85 25		      STA	VDELP0
    862  f239		       85 26		      STA	VDELP1	;do we need these
    863  f23b		       85 04		      STA	NUSIZ0
    864  f23d		       85 05		      STA	NUSIZ1
    865  f23f
    866  f23f							; lda scorepointers+3
    867  f23f		       a4 9e		      ldy	temp3
    868  f241							; sta temp3
    869  f241		       84 99		      sty	scorepointers+3
    870  f243
    871  f243							; lda scorepointers+5
    872  f243		       a4 a0		      ldy	temp5
    873  f245							; sta temp5
    874  f245		       84 9b		      sty	scorepointers+5
    875  f247					      endif		;noscore
    876  f247		       a9 c2		      LDA	#%11000010
    877  f249		       85 02		      sta	WSYNC
    878  f24b		       85 01		      STA	VBLANK
      0  f24d					      RETURN
      1  f24d					      ifnconst	bankswitch
      2  f24d		       60		      rts
      3  f24e				  -	      else
      4  f24e				  -	      jmp	BS_return
      5  f24e					      endif
    880  f24e
    881  f24e				  -	      ifconst	shakescreen
    882  f24e				  -doshakescreen
    883  f24e				  -	      bit	shakescreen
    884  f24e				  -	      bmi	noshakescreen
    885  f24e				  -	      sta	WSYNC
    886  f24e				  -noshakescreen
    887  f24e				  -	      ldx	missile0height
    888  f24e				  -	      inx
    889  f24e				  -	      rts
    890  f24e					      endif
    891  f24e
    892  f24e							; playfield drawing routines
    893  f24e							; you get a 32x12 bitmapped display in a single color :)
    894  f24e							; 0-31 and 0-11
    895  f24e
    896  f24e				   pfclear		; clears playfield - or fill with pattern
    897  f24e				  -	      ifconst	pfres
    898  f24e				  -	      ldx	#pfres*pfwidth-1
    899  f24e					      else
    900  f24e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    901  f250					      endif
    902  f250				   pfclear_loop
    903  f250					      ifnconst	superchip
    904  f250		       95 a4		      sta	playfield,x
    905  f252				  -	      else
    906  f252				  -	      sta	playfield-128,x
    907  f252					      endif
    908  f252		       ca		      dex
    909  f253		       10 fb		      bpl	pfclear_loop
      0  f255					      RETURN
      1  f255					      ifnconst	bankswitch
      2  f255		       60		      rts
      3  f256				  -	      else
      4  f256				  -	      jmp	BS_return
      5  f256					      endif
    911  f256
    912  f256				   setuppointers
    913  f256		       86 9d		      stx	temp2	; store on.off.flip value
    914  f258		       aa		      tax		; put x-value in x
    915  f259		       4a		      lsr
    916  f25a		       4a		      lsr
    917  f25b		       4a		      lsr		; divide x pos by 8
    918  f25c		       85 9c		      sta	temp1
    919  f25e		       98		      tya
    920  f25f		       0a		      asl
    921  f260					      if	pfwidth=4
    922  f260		       0a		      asl		; multiply y pos by 4
    923  f261					      endif		; else multiply by 2
    924  f261		       18		      clc
    925  f262		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    926  f264		       a8		      tay		; put the value in y
    927  f265		       a5 9d		      lda	temp2	; restore on.off.flip value
    928  f267		       60		      rts
    929  f268
    930  f268				   pfread
    931  f268							;x=xvalue, y=yvalue
    932  f268		       20 56 f2 	      jsr	setuppointers
    933  f26b		       bd d0 f2 	      lda	setbyte,x
    934  f26e		       39 a4 00 	      and	playfield,y
    935  f271		       5d d0 f2 	      eor	setbyte,x
    936  f274							; beq readzero
    937  f274							; lda #1
    938  f274							; readzero
      0  f274					      RETURN
      1  f274					      ifnconst	bankswitch
      2  f274		       60		      rts
      3  f275				  -	      else
      4  f275				  -	      jmp	BS_return
      5  f275					      endif
    940  f275
    941  f275				   pfpixel
    942  f275							;x=xvalue, y=yvalue, a=0,1,2
    943  f275		       20 56 f2 	      jsr	setuppointers
    944  f278
    945  f278				  -	      ifconst	bankswitch
    946  f278				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    947  f278				  -	      beq	pixelon_r	; if "on" go to on
    948  f278				  -	      lsr
    949  f278				  -	      bcs	pixeloff_r	; value is 1 if true
    950  f278				  -	      lda	playfield,y	; if here, it's "flip"
    951  f278				  -	      eor	setbyte,x
    952  f278				  -	      ifconst	superchip
    953  f278				  -	      sta	playfield-128,y
    954  f278				  -	      else
    955  f278				  -	      sta	playfield,y
    956  f278				  -	      endif
    957  f278				  -	      RETURN
    958  f278				  -pixelon_r
    959  f278				  -	      lda	playfield,y
    960  f278				  -	      ora	setbyte,x
    961  f278				  -	      ifconst	superchip
    962  f278				  -	      sta	playfield-128,y
    963  f278				  -	      else
    964  f278				  -	      sta	playfield,y
    965  f278				  -	      endif
    966  f278				  -	      RETURN
    967  f278				  -pixeloff_r
    968  f278				  -	      lda	setbyte,x
    969  f278				  -	      eor	#$ff
    970  f278				  -	      and	playfield,y
    971  f278				  -	      ifconst	superchip
    972  f278				  -	      sta	playfield-128,y
    973  f278				  -	      else
    974  f278				  -	      sta	playfield,y
    975  f278				  -	      endif
    976  f278				  -	      RETURN
    977  f278				  -
    978  f278					      else
    979  f278		       4c a9 f2 	      jmp	plotpoint
    980  f27b					      endif
    981  f27b
    982  f27b				   pfhline
    983  f27b							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    984  f27b		       20 56 f2 	      jsr	setuppointers
    985  f27e		       4c 88 f2 	      jmp	noinc
    986  f281				   keepgoing
    987  f281		       e8		      inx
    988  f282		       8a		      txa
    989  f283		       29 07		      and	#7
    990  f285		       d0 01		      bne	noinc
    991  f287		       c8		      iny
    992  f288				   noinc
    993  f288		       20 a9 f2 	      jsr	plotpoint
    994  f28b		       e4 9e		      cpx	temp3
    995  f28d		       30 f2		      bmi	keepgoing
      0  f28f					      RETURN
      1  f28f					      ifnconst	bankswitch
      2  f28f		       60		      rts
      3  f290				  -	      else
      4  f290				  -	      jmp	BS_return
      5  f290					      endif
    997  f290
    998  f290				   pfvline
    999  f290							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1000  f290		       20 56 f2 	      jsr	setuppointers
   1001  f293		       84 9c		      sty	temp1	; store memory location offset
   1002  f295		       e6 9e		      inc	temp3	; increase final x by 1
   1003  f297		       a5 9e		      lda	temp3
   1004  f299		       0a		      asl
   1005  f29a					      if	pfwidth=4
   1006  f29a		       0a		      asl		; multiply by 4
   1007  f29b					      endif		; else multiply by 2
   1008  f29b		       85 9e		      sta	temp3	; store it
   1009  f29d							; Thanks to Michael Rideout for fixing a bug in this code
   1010  f29d							; right now, temp1=y=starting memory location, temp3=final
   1011  f29d							; x should equal original x value
   1012  f29d				   keepgoingy
   1013  f29d		       20 a9 f2 	      jsr	plotpoint
   1014  f2a0		       c8		      iny
   1015  f2a1		       c8		      iny
   1016  f2a2					      if	pfwidth=4
   1017  f2a2		       c8		      iny
   1018  f2a3		       c8		      iny
   1019  f2a4					      endif
   1020  f2a4		       c4 9e		      cpy	temp3
   1021  f2a6		       30 f5		      bmi	keepgoingy
      0  f2a8					      RETURN
      1  f2a8					      ifnconst	bankswitch
      2  f2a8		       60		      rts
      3  f2a9				  -	      else
      4  f2a9				  -	      jmp	BS_return
      5  f2a9					      endif
   1023  f2a9
   1024  f2a9				   plotpoint
   1025  f2a9		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1026  f2ab		       f0 0d		      beq	pixelon	; if "on" go to on
   1027  f2ad		       4a		      lsr
   1028  f2ae		       b0 14		      bcs	pixeloff	; value is 1 if true
   1029  f2b0		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1030  f2b3		       5d d0 f2 	      eor	setbyte,x
   1031  f2b6				  -	      ifconst	superchip
   1032  f2b6				  -	      sta	playfield-128,y
   1033  f2b6					      else
   1034  f2b6		       99 a4 00 	      sta	playfield,y
   1035  f2b9					      endif
   1036  f2b9		       60		      rts
   1037  f2ba				   pixelon
   1038  f2ba		       b9 a4 00 	      lda	playfield,y
   1039  f2bd		       1d d0 f2 	      ora	setbyte,x
   1040  f2c0				  -	      ifconst	superchip
   1041  f2c0				  -	      sta	playfield-128,y
   1042  f2c0					      else
   1043  f2c0		       99 a4 00 	      sta	playfield,y
   1044  f2c3					      endif
   1045  f2c3		       60		      rts
   1046  f2c4				   pixeloff
   1047  f2c4		       bd d0 f2 	      lda	setbyte,x
   1048  f2c7		       49 ff		      eor	#$ff
   1049  f2c9		       39 a4 00 	      and	playfield,y
   1050  f2cc				  -	      ifconst	superchip
   1051  f2cc				  -	      sta	playfield-128,y
   1052  f2cc					      else
   1053  f2cc		       99 a4 00 	      sta	playfield,y
   1054  f2cf					      endif
   1055  f2cf		       60		      rts
   1056  f2d0
   1057  f2d0				   setbyte
   1058  f2d0					      ifnconst	pfcenter
   1059  f2d0		       80		      .byte.b	$80
   1060  f2d1		       40		      .byte.b	$40
   1061  f2d2		       20		      .byte.b	$20
   1062  f2d3		       10		      .byte.b	$10
   1063  f2d4		       08		      .byte.b	$08
   1064  f2d5		       04		      .byte.b	$04
   1065  f2d6		       02		      .byte.b	$02
   1066  f2d7		       01		      .byte.b	$01
   1067  f2d8					      endif
   1068  f2d8		       01		      .byte.b	$01
   1069  f2d9		       02		      .byte.b	$02
   1070  f2da		       04		      .byte.b	$04
   1071  f2db		       08		      .byte.b	$08
   1072  f2dc		       10		      .byte.b	$10
   1073  f2dd		       20		      .byte.b	$20
   1074  f2de		       40		      .byte.b	$40
   1075  f2df		       80		      .byte.b	$80
   1076  f2e0		       80		      .byte.b	$80
   1077  f2e1		       40		      .byte.b	$40
   1078  f2e2		       20		      .byte.b	$20
   1079  f2e3		       10		      .byte.b	$10
   1080  f2e4		       08		      .byte.b	$08
   1081  f2e5		       04		      .byte.b	$04
   1082  f2e6		       02		      .byte.b	$02
   1083  f2e7		       01		      .byte.b	$01
   1084  f2e8		       01		      .byte.b	$01
   1085  f2e9		       02		      .byte.b	$02
   1086  f2ea		       04		      .byte.b	$04
   1087  f2eb		       08		      .byte.b	$08
   1088  f2ec		       10		      .byte.b	$10
   1089  f2ed		       20		      .byte.b	$20
   1090  f2ee		       40		      .byte.b	$40
   1091  f2ef		       80		      .byte.b	$80
   1092  f2f0				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2f0		       d0 13		      bne	notleft
   1094  f2f2							;left
   1095  f2f2				  -	      ifconst	pfres
   1096  f2f2				  -	      ldx	#pfres*4
   1097  f2f2					      else
   1098  f2f2		       a2 30		      ldx	#48
   1099  f2f4					      endif
   1100  f2f4				   leftloop
   1101  f2f4		       b5 a3		      lda	playfield-1,x
   1102  f2f6		       4a		      lsr
   1103  f2f7
   1104  f2f7				  -	      ifconst	superchip
   1105  f2f7				  -	      lda	playfield-2,x
   1106  f2f7				  -	      rol
   1107  f2f7				  -	      sta	playfield-130,x
   1108  f2f7				  -	      lda	playfield-3,x
   1109  f2f7				  -	      ror
   1110  f2f7				  -	      sta	playfield-131,x
   1111  f2f7				  -	      lda	playfield-4,x
   1112  f2f7				  -	      rol
   1113  f2f7				  -	      sta	playfield-132,x
   1114  f2f7				  -	      lda	playfield-1,x
   1115  f2f7				  -	      ror
   1116  f2f7				  -	      sta	playfield-129,x
   1117  f2f7					      else
   1118  f2f7		       36 a2		      rol	playfield-2,x
   1119  f2f9		       76 a1		      ror	playfield-3,x
   1120  f2fb		       36 a0		      rol	playfield-4,x
   1121  f2fd		       76 a3		      ror	playfield-1,x
   1122  f2ff					      endif
   1123  f2ff
   1124  f2ff		       8a		      txa
   1125  f300		       cb 04		      sbx	#4
   1126  f302		       d0 f0		      bne	leftloop
      0  f304					      RETURN
      1  f304					      ifnconst	bankswitch
      2  f304		       60		      rts
      3  f305				  -	      else
      4  f305				  -	      jmp	BS_return
      5  f305					      endif
   1128  f305
   1129  f305				   notleft
   1130  f305		       4a		      lsr
   1131  f306		       90 13		      bcc	notright
   1132  f308							;right
   1133  f308
   1134  f308				  -	      ifconst	pfres
   1135  f308				  -	      ldx	#pfres*4
   1136  f308					      else
   1137  f308		       a2 30		      ldx	#48
   1138  f30a					      endif
   1139  f30a				   rightloop
   1140  f30a		       b5 a0		      lda	playfield-4,x
   1141  f30c		       4a		      lsr
   1142  f30d				  -	      ifconst	superchip
   1143  f30d				  -	      lda	playfield-3,x
   1144  f30d				  -	      rol
   1145  f30d				  -	      sta	playfield-131,x
   1146  f30d				  -	      lda	playfield-2,x
   1147  f30d				  -	      ror
   1148  f30d				  -	      sta	playfield-130,x
   1149  f30d				  -	      lda	playfield-1,x
   1150  f30d				  -	      rol
   1151  f30d				  -	      sta	playfield-129,x
   1152  f30d				  -	      lda	playfield-4,x
   1153  f30d				  -	      ror
   1154  f30d				  -	      sta	playfield-132,x
   1155  f30d					      else
   1156  f30d		       36 a1		      rol	playfield-3,x
   1157  f30f		       76 a2		      ror	playfield-2,x
   1158  f311		       36 a3		      rol	playfield-1,x
   1159  f313		       76 a0		      ror	playfield-4,x
   1160  f315					      endif
   1161  f315		       8a		      txa
   1162  f316		       cb 04		      sbx	#4
   1163  f318		       d0 f0		      bne	rightloop
      0  f31a					      RETURN
      1  f31a					      ifnconst	bankswitch
      2  f31a		       60		      rts
      3  f31b				  -	      else
      4  f31b				  -	      jmp	BS_return
      5  f31b					      endif
   1165  f31b
   1166  f31b				   notright
   1167  f31b		       4a		      lsr
   1168  f31c		       90 49		      bcc	notup
   1169  f31e							;up
   1170  f31e		       4a		      lsr
   1171  f31f		       90 02		      bcc	onedecup
   1172  f321		       c6 ef		      dec	playfieldpos
   1173  f323				   onedecup
   1174  f323		       c6 ef		      dec	playfieldpos
   1175  f325		       f0 02		      beq	shiftdown
   1176  f327		       10 3d		      bpl	noshiftdown2
   1177  f329				   shiftdown
   1178  f329				  -	      ifconst	pfrowheight
   1179  f329				  -	      lda	#pfrowheight
   1180  f329					      else
   1181  f329					      ifnconst	pfres
   1182  f329		       a9 08		      lda	#8
   1183  f32b				  -	      else
   1184  f32b				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f32b					      endif
   1186  f32b					      endif
   1187  f32b
   1188  f32b		       85 ef		      sta	playfieldpos
   1189  f32d		       a5 a7		      lda	playfield+3
   1190  f32f		       85 9f		      sta	temp4
   1191  f331		       a5 a6		      lda	playfield+2
   1192  f333		       85 9e		      sta	temp3
   1193  f335		       a5 a5		      lda	playfield+1
   1194  f337		       85 9d		      sta	temp2
   1195  f339		       a5 a4		      lda	playfield
   1196  f33b		       85 9c		      sta	temp1
   1197  f33d		       a2 00		      ldx	#0
   1198  f33f				   up2
   1199  f33f		       b5 a8		      lda	playfield+4,x
   1200  f341				  -	      ifconst	superchip
   1201  f341				  -	      sta	playfield-128,x
   1202  f341				  -	      lda	playfield+5,x
   1203  f341				  -	      sta	playfield-127,x
   1204  f341				  -	      lda	playfield+6,x
   1205  f341				  -	      sta	playfield-126,x
   1206  f341				  -	      lda	playfield+7,x
   1207  f341				  -	      sta	playfield-125,x
   1208  f341					      else
   1209  f341		       95 a4		      sta	playfield,x
   1210  f343		       b5 a9		      lda	playfield+5,x
   1211  f345		       95 a5		      sta	playfield+1,x
   1212  f347		       b5 aa		      lda	playfield+6,x
   1213  f349		       95 a6		      sta	playfield+2,x
   1214  f34b		       b5 ab		      lda	playfield+7,x
   1215  f34d		       95 a7		      sta	playfield+3,x
   1216  f34f					      endif
   1217  f34f		       8a		      txa
   1218  f350		       cb fc		      sbx	#252
   1219  f352				  -	      ifconst	pfres
   1220  f352				  -	      cpx	#(pfres-1)*4
   1221  f352					      else
   1222  f352		       e0 2c		      cpx	#44
   1223  f354					      endif
   1224  f354		       d0 e9		      bne	up2
   1225  f356
   1226  f356		       a5 9f		      lda	temp4
   1227  f358
   1228  f358				  -	      ifconst	superchip
   1229  f358				  -	      ifconst	pfres
   1230  f358				  -	      sta	playfield+pfres*4-129
   1231  f358				  -	      lda	temp3
   1232  f358				  -	      sta	playfield+pfres*4-130
   1233  f358				  -	      lda	temp2
   1234  f358				  -	      sta	playfield+pfres*4-131
   1235  f358				  -	      lda	temp1
   1236  f358				  -	      sta	playfield+pfres*4-132
   1237  f358				  -	      else
   1238  f358				  -	      sta	playfield+47-128
   1239  f358				  -	      lda	temp3
   1240  f358				  -	      sta	playfield+46-128
   1241  f358				  -	      lda	temp2
   1242  f358				  -	      sta	playfield+45-128
   1243  f358				  -	      lda	temp1
   1244  f358				  -	      sta	playfield+44-128
   1245  f358				  -	      endif
   1246  f358					      else
   1247  f358				  -	      ifconst	pfres
   1248  f358				  -	      sta	playfield+pfres*4-1
   1249  f358				  -	      lda	temp3
   1250  f358				  -	      sta	playfield+pfres*4-2
   1251  f358				  -	      lda	temp2
   1252  f358				  -	      sta	playfield+pfres*4-3
   1253  f358				  -	      lda	temp1
   1254  f358				  -	      sta	playfield+pfres*4-4
   1255  f358					      else
   1256  f358		       85 d3		      sta	playfield+47
   1257  f35a		       a5 9e		      lda	temp3
   1258  f35c		       85 d2		      sta	playfield+46
   1259  f35e		       a5 9d		      lda	temp2
   1260  f360		       85 d1		      sta	playfield+45
   1261  f362		       a5 9c		      lda	temp1
   1262  f364		       85 d0		      sta	playfield+44
   1263  f366					      endif
   1264  f366					      endif
   1265  f366				   noshiftdown2
      0  f366					      RETURN
      1  f366					      ifnconst	bankswitch
      2  f366		       60		      rts
      3  f367				  -	      else
      4  f367				  -	      jmp	BS_return
      5  f367					      endif
   1267  f367
   1268  f367
   1269  f367				   notup
   1270  f367							;down
   1271  f367		       4a		      lsr
   1272  f368		       b0 02		      bcs	oneincup
   1273  f36a		       e6 ef		      inc	playfieldpos
   1274  f36c				   oneincup
   1275  f36c		       e6 ef		      inc	playfieldpos
   1276  f36e		       a5 ef		      lda	playfieldpos
   1277  f370
   1278  f370				  -	      ifconst	pfrowheight
   1279  f370				  -	      cmp	#pfrowheight+1
   1280  f370					      else
   1281  f370					      ifnconst	pfres
   1282  f370		       c9 09		      cmp	#9
   1283  f372				  -	      else
   1284  f372				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f372					      endif
   1286  f372					      endif
   1287  f372
   1288  f372		       90 3b		      bcc	noshiftdown
   1289  f374		       a9 01		      lda	#1
   1290  f376		       85 ef		      sta	playfieldpos
   1291  f378
   1292  f378				  -	      ifconst	pfres
   1293  f378				  -	      lda	playfield+pfres*4-1
   1294  f378				  -	      sta	temp4
   1295  f378				  -	      lda	playfield+pfres*4-2
   1296  f378				  -	      sta	temp3
   1297  f378				  -	      lda	playfield+pfres*4-3
   1298  f378				  -	      sta	temp2
   1299  f378				  -	      lda	playfield+pfres*4-4
   1300  f378					      else
   1301  f378		       a5 d3		      lda	playfield+47
   1302  f37a		       85 9f		      sta	temp4
   1303  f37c		       a5 d2		      lda	playfield+46
   1304  f37e		       85 9e		      sta	temp3
   1305  f380		       a5 d1		      lda	playfield+45
   1306  f382		       85 9d		      sta	temp2
   1307  f384		       a5 d0		      lda	playfield+44
   1308  f386					      endif
   1309  f386
   1310  f386		       85 9c		      sta	temp1
   1311  f388
   1312  f388				  -	      ifconst	pfres
   1313  f388				  -	      ldx	#(pfres-1)*4
   1314  f388					      else
   1315  f388		       a2 2c		      ldx	#44
   1316  f38a					      endif
   1317  f38a				   down2
   1318  f38a		       b5 a3		      lda	playfield-1,x
   1319  f38c				  -	      ifconst	superchip
   1320  f38c				  -	      sta	playfield-125,x
   1321  f38c				  -	      lda	playfield-2,x
   1322  f38c				  -	      sta	playfield-126,x
   1323  f38c				  -	      lda	playfield-3,x
   1324  f38c				  -	      sta	playfield-127,x
   1325  f38c				  -	      lda	playfield-4,x
   1326  f38c				  -	      sta	playfield-128,x
   1327  f38c					      else
   1328  f38c		       95 a7		      sta	playfield+3,x
   1329  f38e		       b5 a2		      lda	playfield-2,x
   1330  f390		       95 a6		      sta	playfield+2,x
   1331  f392		       b5 a1		      lda	playfield-3,x
   1332  f394		       95 a5		      sta	playfield+1,x
   1333  f396		       b5 a0		      lda	playfield-4,x
   1334  f398		       95 a4		      sta	playfield,x
   1335  f39a					      endif
   1336  f39a		       8a		      txa
   1337  f39b		       cb 04		      sbx	#4
   1338  f39d		       d0 eb		      bne	down2
   1339  f39f
   1340  f39f		       a5 9f		      lda	temp4
   1341  f3a1				  -	      ifconst	superchip
   1342  f3a1				  -	      sta	playfield-125
   1343  f3a1				  -	      lda	temp3
   1344  f3a1				  -	      sta	playfield-126
   1345  f3a1				  -	      lda	temp2
   1346  f3a1				  -	      sta	playfield-127
   1347  f3a1				  -	      lda	temp1
   1348  f3a1				  -	      sta	playfield-128
   1349  f3a1					      else
   1350  f3a1		       85 a7		      sta	playfield+3
   1351  f3a3		       a5 9e		      lda	temp3
   1352  f3a5		       85 a6		      sta	playfield+2
   1353  f3a7		       a5 9d		      lda	temp2
   1354  f3a9		       85 a5		      sta	playfield+1
   1355  f3ab		       a5 9c		      lda	temp1
   1356  f3ad		       85 a4		      sta	playfield
   1357  f3af					      endif
   1358  f3af				   noshiftdown
      0  f3af					      RETURN
      1  f3af					      ifnconst	bankswitch
      2  f3af		       60		      rts
      3  f3b0				  -	      else
      4  f3b0				  -	      jmp	BS_return
      5  f3b0					      endif
   1360  f3b0							;standard routines needed for pretty much all games
   1361  f3b0							; just the random number generator is left - maybe we should remove this asm file altogether?
   1362  f3b0							; repositioning code and score pointer setup moved to overscan
   1363  f3b0							; read switches, joysticks now compiler generated (more efficient)
   1364  f3b0
   1365  f3b0				   randomize
   1366  f3b0		       a5 a2		      lda	rand
   1367  f3b2		       4a		      lsr
   1368  f3b3				  -	      ifconst	rand16
   1369  f3b3				  -	      rol	rand16
   1370  f3b3					      endif
   1371  f3b3		       90 02		      bcc	noeor
   1372  f3b5		       49 b4		      eor	#$B4
   1373  f3b7				   noeor
   1374  f3b7		       85 a2		      sta	rand
   1375  f3b9				  -	      ifconst	rand16
   1376  f3b9				  -	      eor	rand16
   1377  f3b9					      endif
      0  f3b9					      RETURN
      1  f3b9					      ifnconst	bankswitch
      2  f3b9		       60		      rts
      3  f3ba				  -	      else
      4  f3ba				  -	      jmp	BS_return
      5  f3ba					      endif
   1379  f3ba				   drawscreen
   1380  f3ba				  -	      ifconst	debugscore
   1381  f3ba				  -	      ldx	#14
   1382  f3ba				  -	      lda	INTIM	; display # cycles left in the score
   1383  f3ba				  -
   1384  f3ba				  -	      ifconst	mincycles
   1385  f3ba				  -	      lda	mincycles
   1386  f3ba				  -	      cmp	INTIM
   1387  f3ba				  -	      lda	mincycles
   1388  f3ba				  -	      bcc	nochange
   1389  f3ba				  -	      lda	INTIM
   1390  f3ba				  -	      sta	mincycles
   1391  f3ba				  -nochange
   1392  f3ba				  -	      endif
   1393  f3ba				  -
   1394  f3ba				  -			; cmp #$2B
   1395  f3ba				  -			; bcs no_cycles_left
   1396  f3ba				  -	      bmi	cycles_left
   1397  f3ba				  -	      ldx	#64
   1398  f3ba				  -	      eor	#$ff	;make negative
   1399  f3ba				  -cycles_left
   1400  f3ba				  -	      stx	scorecolor
   1401  f3ba				  -	      and	#$7f	; clear sign bit
   1402  f3ba				  -	      tax
   1403  f3ba				  -	      lda	scorebcd,x
   1404  f3ba				  -	      sta	score+2
   1405  f3ba				  -	      lda	scorebcd1,x
   1406  f3ba				  -	      sta	score+1
   1407  f3ba				  -	      jmp	done_debugscore
   1408  f3ba				  -scorebcd
   1409  f3ba				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1410  f3ba				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1411  f3ba				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1412  f3ba				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1413  f3ba				  -scorebcd1
   1414  f3ba				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1415  f3ba				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1416  f3ba				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1417  f3ba				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1418  f3ba				  -done_debugscore
   1419  f3ba					      endif
   1420  f3ba
   1421  f3ba				  -	      ifconst	debugcycles
   1422  f3ba				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1423  f3ba				  -			; cmp #$2B
   1424  f3ba				  -			; BCC overscan
   1425  f3ba				  -	      bmi	overscan
   1426  f3ba				  -	      sta	COLUBK
   1427  f3ba				  -	      bcs	doneoverscan
   1428  f3ba					      endif
   1429  f3ba
   1430  f3ba				   overscan
   1431  f3ba				  -	      ifconst	interlaced
   1432  f3ba				  -	      PHP
   1433  f3ba				  -	      PLA
   1434  f3ba				  -	      EOR	#4	; flip interrupt bit
   1435  f3ba				  -	      PHA
   1436  f3ba				  -	      PLP
   1437  f3ba				  -	      AND	#4	; isolate the interrupt bit
   1438  f3ba				  -	      TAX		; save it for later
   1439  f3ba					      endif
   1440  f3ba
   1441  f3ba				   overscanloop
   1442  f3ba		       ad 84 02 	      lda	INTIM	;wait for sync
   1443  f3bd		       30 fb		      bmi	overscanloop
   1444  f3bf				   doneoverscan
   1445  f3bf
   1446  f3bf							;do VSYNC
   1447  f3bf
   1448  f3bf				  -	      ifconst	interlaced
   1449  f3bf				  -	      CPX	#4
   1450  f3bf				  -	      BNE	oddframevsync
   1451  f3bf					      endif
   1452  f3bf
   1453  f3bf		       a9 02		      lda	#2
   1454  f3c1		       85 02		      sta	WSYNC
   1455  f3c3		       85 00		      sta	VSYNC
   1456  f3c5		       85 02		      STA	WSYNC
   1457  f3c7		       85 02		      STA	WSYNC
   1458  f3c9		       4a		      lsr
   1459  f3ca		       85 02		      STA	WSYNC
   1460  f3cc		       85 00		      STA	VSYNC
   1461  f3ce		       85 01		      sta	VBLANK
   1462  f3d0					      ifnconst	overscan_time
   1463  f3d0		       a9 a5		      lda	#37+128
   1464  f3d2				  -	      else
   1465  f3d2				  -	      lda	#overscan_time+128
   1466  f3d2					      endif
   1467  f3d2		       8d 96 02 	      sta	TIM64T
   1468  f3d5
   1469  f3d5				  -	      ifconst	interlaced
   1470  f3d5				  -	      jmp	postsync
   1471  f3d5				  -
   1472  f3d5				  -oddframevsync
   1473  f3d5				  -	      sta	WSYNC
   1474  f3d5				  -
   1475  f3d5				  -	      LDA	($80,X)	; 11 waste
   1476  f3d5				  -	      LDA	($80,X)	; 11 waste
   1477  f3d5				  -	      LDA	($80,X)	; 11 waste
   1478  f3d5				  -
   1479  f3d5				  -	      lda	#2
   1480  f3d5				  -	      sta	VSYNC
   1481  f3d5				  -	      sta	WSYNC
   1482  f3d5				  -	      sta	WSYNC
   1483  f3d5				  -	      sta	WSYNC
   1484  f3d5				  -
   1485  f3d5				  -	      LDA	($80,X)	; 11 waste
   1486  f3d5				  -	      LDA	($80,X)	; 11 waste
   1487  f3d5				  -	      LDA	($80,X)	; 11 waste
   1488  f3d5				  -
   1489  f3d5				  -	      lda	#0
   1490  f3d5				  -	      sta	VSYNC
   1491  f3d5				  -	      sta	VBLANK
   1492  f3d5				  -	      ifnconst	overscan_time
   1493  f3d5				  -	      lda	#37+128
   1494  f3d5				  -	      else
   1495  f3d5				  -	      lda	#overscan_time+128
   1496  f3d5				  -	      endif
   1497  f3d5				  -	      sta	TIM64T
   1498  f3d5				  -
   1499  f3d5				  -postsync
   1500  f3d5					      endif
   1501  f3d5
   1502  f3d5				  -	      ifconst	legacy
   1503  f3d5				  -	      if	legacy < 100
   1504  f3d5				  -	      ldx	#4
   1505  f3d5				  -adjustloop
   1506  f3d5				  -	      lda	player0x,x
   1507  f3d5				  -	      sec
   1508  f3d5				  -	      sbc	#14	;?
   1509  f3d5				  -	      sta	player0x,x
   1510  f3d5				  -	      dex
   1511  f3d5				  -	      bpl	adjustloop
   1512  f3d5				  -	      endif
   1513  f3d5					      endif
   1514  f3d5				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1515  f3d5				  -	      repeat	($fa-(<*))
   1516  f3d5				  -	      nop
   1517  f3d5				  -	      repend
   1518  f3d5					      endif
   1519  f3d5		       85 02		      sta	WSYNC
   1520  f3d7		       a2 04		      ldx	#4
      0  f3d9					      SLEEP	3
      1  f3d9				   .CYCLES    SET	3
      2  f3d9
      3  f3d9				  -	      IF	.CYCLES < 2
      4  f3d9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3d9				  -	      ERR
      6  f3d9					      ENDIF
      7  f3d9
      8  f3d9					      IF	.CYCLES & 1
      9  f3d9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3d9		       04 00		      nop	0
     11  f3db				  -	      ELSE
     12  f3db				  -	      bit	VSYNC
     13  f3db					      ENDIF
     14  f3db				   .CYCLES    SET	.CYCLES - 3
     15  f3db					      ENDIF
     16  f3db
     17  f3db				  -	      REPEAT	.CYCLES / 2
     18  f3db				  -	      nop
     19  f3db					      REPEND
   1522  f3db				   HorPosLoop		; 5
   1523  f3db		       b5 80		      lda	player0x,X	;+4 9
   1524  f3dd		       38		      sec		;+2 11
   1525  f3de				   DivideLoop
   1526  f3de		       e9 0f		      sbc	#15
   1527  f3e0		       b0 fc		      bcs	DivideLoop	;+4 15
   1528  f3e2		       95 9c		      sta	temp1,X	;+4 19
   1529  f3e4		       95 10		      sta	RESP0,X	;+4 23
   1530  f3e6		       85 02		      sta	WSYNC
   1531  f3e8		       ca		      dex
   1532  f3e9		       10 f0		      bpl	HorPosLoop	;+5 5
   1533  f3eb							; 4
   1534  f3eb
   1535  f3eb		       a2 04		      ldx	#4
   1536  f3ed		       b4 9c		      ldy	temp1,X
   1537  f3ef		       b9 4b f3 	      lda	repostable-256,Y
   1538  f3f2		       95 20		      sta	HMP0,X	;+14 18
   1539  f3f4
   1540  f3f4		       ca		      dex
   1541  f3f5		       b4 9c		      ldy	temp1,X
   1542  f3f7		       b9 4b f3 	      lda	repostable-256,Y
   1543  f3fa		       95 20		      sta	HMP0,X	;+14 32
   1544  f3fc
   1545  f3fc		       ca		      dex
   1546  f3fd		       b4 9c		      ldy	temp1,X
   1547  f3ff		       b9 4b f3 	      lda	repostable-256,Y
   1548  f402		       95 20		      sta	HMP0,X	;+14 46
   1549  f404
   1550  f404		       ca		      dex
   1551  f405		       b4 9c		      ldy	temp1,X
   1552  f407		       b9 4b f3 	      lda	repostable-256,Y
   1553  f40a		       95 20		      sta	HMP0,X	;+14 60
   1554  f40c
   1555  f40c		       ca		      dex
   1556  f40d		       b4 9c		      ldy	temp1,X
   1557  f40f		       b9 4b f3 	      lda	repostable-256,Y
   1558  f412		       95 20		      sta	HMP0,X	;+14 74
   1559  f414
   1560  f414		       85 02		      sta	WSYNC
   1561  f416
   1562  f416		       85 2a		      sta	HMOVE	;+3 3
   1563  f418
   1564  f418
   1565  f418				  -	      ifconst	legacy
   1566  f418				  -	      if	legacy < 100
   1567  f418				  -	      ldx	#4
   1568  f418				  -adjustloop2
   1569  f418				  -	      lda	player0x,x
   1570  f418				  -	      clc
   1571  f418				  -	      adc	#14	;?
   1572  f418				  -	      sta	player0x,x
   1573  f418				  -	      dex
   1574  f418				  -	      bpl	adjustloop2
   1575  f418				  -	      endif
   1576  f418					      endif
   1577  f418
   1578  f418
   1579  f418
   1580  f418
   1581  f418							;set score pointers
   1582  f418		       a7 95		      lax	score+2
   1583  f41a		       20 4b f4 	      jsr	scorepointerset
   1584  f41d		       84 9b		      sty	scorepointers+5
   1585  f41f		       86 98		      stx	scorepointers+2
   1586  f421		       a7 94		      lax	score+1
   1587  f423		       20 4b f4 	      jsr	scorepointerset
   1588  f426		       84 9a		      sty	scorepointers+4
   1589  f428		       86 97		      stx	scorepointers+1
   1590  f42a		       a7 93		      lax	score
   1591  f42c		       20 4b f4 	      jsr	scorepointerset
   1592  f42f		       84 99		      sty	scorepointers+3
   1593  f431		       86 96		      stx	scorepointers
   1594  f433
   1595  f433				   vblk
   1596  f433							; run possible vblank bB code
   1597  f433				  -	      ifconst	vblank_bB_code
   1598  f433				  -	      jsr	vblank_bB_code
   1599  f433					      endif
   1600  f433				   vblk2
   1601  f433		       ad 84 02 	      LDA	INTIM
   1602  f436		       30 fb		      bmi	vblk2
   1603  f438		       4c 34 f0 	      jmp	kernel
   1604  f43b
   1605  f43b
   1606  f43b		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1607  f444		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1608  f44b				   repostable
   1609  f44b
   1610  f44b				   scorepointerset
   1611  f44b		       29 0f		      and	#$0F
   1612  f44d		       0a		      asl
   1613  f44e		       0a		      asl
   1614  f44f		       0a		      asl
   1615  f450		       69 9c		      adc	#<scoretable
   1616  f452		       a8		      tay
   1617  f453		       8a		      txa
   1618  f454							; and #$F0
   1619  f454							; lsr
   1620  f454		       4b f0		      asr	#$F0
   1621  f456		       69 9c		      adc	#<scoretable
   1622  f458		       aa		      tax
   1623  f459		       60		      rts
   1624  f45a				   game
   1625  f45a				   .L00 		;  set romsize 4k
   1626  f45a
   1627  f45a				   .L01 		;  set tv
   1628  f45a
   1629  f45a				   .L02 		;  set kernel_options playercolors player1colors pfcolors
   1630  f45a
   1631  f45a				   .L03 		;  x = 75  :  y  = 75
   1632  f45a
   1633  f45a		       a9 4b		      LDA	#75
   1634  f45c		       85 eb		      STA	x
   1635  f45e		       85 ec		      STA	y
   1636  f460				   .main
   1637  f460							; main
   1638  f460
   1639  f460				   .L04 		;  COLUP0  =  $40
   1640  f460
   1641  f460		       a9 40		      LDA	#$40
   1642  f462		       85 06		      STA	COLUP0
   1643  f464				   .L05 		;  COLUP1  =  $40
   1644  f464
   1645  f464		       a9 40		      LDA	#$40
   1646  f466		       85 07		      STA	COLUP1
   1647  f468				   .L06 		;  COLUBK  =  $0E
   1648  f468
   1649  f468		       a9 0e		      LDA	#$0E
   1650  f46a		       85 09		      STA	COLUBK
   1651  f46c				   .
   1652  f46c							;
   1653  f46c
   1654  f46c				   .L07 		;  player0color:
   1655  f46c
   1656  f46c		       a2 b6		      LDX	#<playercolorL07_0
   1657  f46e		       86 90		      STX	player0color
   1658  f470		       a9 f4		      LDA	#>playercolorL07_0
   1659  f472		       85 91		      STA	player0color+1
   1660  f474				   .
   1661  f474							;
   1662  f474
   1663  f474				   .hero
   1664  f474							; hero
   1665  f474
   1666  f474				   .L08 		;  player0:
   1667  f474
   1668  f474		       a2 be		      LDX	#<playerL08_0
   1669  f476		       86 8a		      STX	player0pointerlo
   1670  f478		       a9 f4		      LDA	#>playerL08_0
   1671  f47a		       85 8b		      STA	player0pointerhi
   1672  f47c		       a9 07		      LDA	#7
   1673  f47e		       85 8e		      STA	player0height
   1674  f480				   .
   1675  f480							;
   1676  f480
   1677  f480				   .L09 		;  player0x = x
   1678  f480
   1679  f480		       a5 eb		      LDA	x
   1680  f482		       85 80		      STA	player0x
   1681  f484				   .L010		;  player0y = y
   1682  f484
   1683  f484		       a5 ec		      LDA	y
   1684  f486		       85 85		      STA	player0y
   1685  f488				   .
   1686  f488							;
   1687  f488
   1688  f488				   .
   1689  f488							;
   1690  f488
   1691  f488				   .
   1692  f488							;
   1693  f488
   1694  f488				   .L011		;  drawscreen
   1695  f488
   1696  f488		       20 ba f3 	      jsr	drawscreen
   1697  f48b				   .L012		;  if joy0right then x = x + 1  :  REFP0  =  0
   1698  f48b
   1699  f48b		       2c 80 02 	      bit	SWCHA
   1700  f48e		       30 06		      BMI	.skipL012
   1701  f490				   .condpart0
   1702  f490		       e6 eb		      INC	x
   1703  f492		       a9 00		      LDA	#0
   1704  f494		       85 0b		      STA	REFP0
   1705  f496				   .skipL012
   1706  f496				   .L013		;  if joy0left then x = x - 1	:  REFP0  =  8
   1707  f496
   1708  f496		       2c 80 02 	      bit	SWCHA
   1709  f499		       70 06		      BVS	.skipL013
   1710  f49b				   .condpart1
   1711  f49b		       c6 eb		      DEC	x
   1712  f49d		       a9 08		      LDA	#8
   1713  f49f		       85 0b		      STA	REFP0
   1714  f4a1				   .skipL013
   1715  f4a1				   .L014		;  if joy0up then y = y - 1
   1716  f4a1
   1717  f4a1		       a9 10		      lda	#$10
   1718  f4a3		       2c 80 02 	      bit	SWCHA
   1719  f4a6		       d0 02		      BNE	.skipL014
   1720  f4a8				   .condpart2
   1721  f4a8		       c6 ec		      DEC	y
   1722  f4aa				   .skipL014
   1723  f4aa				   .L015		;  if joy0down then y = y + 1
   1724  f4aa
   1725  f4aa		       a9 20		      lda	#$20
   1726  f4ac		       2c 80 02 	      bit	SWCHA
   1727  f4af		       d0 02		      BNE	.skipL015
   1728  f4b1				   .condpart3
   1729  f4b1		       e6 ec		      INC	y
   1730  f4b3				   .skipL015
   1731  f4b3				   .L016		;  goto main
   1732  f4b3
   1733  f4b3		       4c 60 f4 	      jmp	.main
   1734  f4b6
   1735  f4b6				  -	      if	(<*) > (<(*+7))
   1736  f4b6				  -	      repeat	($100-<*)
   1737  f4b6				  -	      .byte	0
   1738  f4b6				  -	      repend
   1739  f4b6					      endif
   1740  f4b6				   playercolorL07_0
   1741  f4b6		       40		      .byte.b	$40
   1742  f4b7		       40		      .byte.b	$40
   1743  f4b8		       40		      .byte.b	$40
   1744  f4b9		       40		      .byte.b	$40
   1745  f4ba		       40		      .byte.b	$40
   1746  f4bb		       40		      .byte.b	$40
   1747  f4bc		       40		      .byte.b	$40
   1748  f4bd		       40		      .byte.b	$40
   1749  f4be				  -	      if	(<*) > (<(*+7))
   1750  f4be				  -	      repeat	($100-<*)
   1751  f4be				  -	      .byte	0
   1752  f4be				  -	      repend
   1753  f4be					      endif
   1754  f4be				   playerL08_0
   1755  f4be		       99		      .byte.b	%10011001
   1756  f4bf		       99		      .byte.b	%10011001
   1757  f4c0		       ff		      .byte.b	%11111111
   1758  f4c1		       3c		      .byte.b	%00111100
   1759  f4c2		       ff		      .byte.b	%11111111
   1760  f4c3		       7e		      .byte.b	%01111110
   1761  f4c4		       24		      .byte.b	%00100100
   1762  f4c5		       99		      .byte.b	%10011001
   1763  f4c6					      if	ECHOFIRST
      2774 bytes of ROM space left
   1764  f4c6					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   1765  f4c6					      endif
   1766  f4c6		       00 01	   ECHOFIRST  =	1
   1767  f4c6
   1768  f4c6
   1769  f4c6
   1770  f4c6							; feel free to modify the score graphics - just keep each digit 8 high
   1771  f4c6							; and keep the conditional compilation stuff intact
   1772  f4c6				  -	      ifconst	ROM2k
   1773  f4c6				  -	      ORG	$F7AC-8
   1774  f4c6					      else
   1775  f4c6				  -	      ifconst	bankswitch
   1776  f4c6				  -	      if	bankswitch == 8
   1777  f4c6				  -	      ORG	$2F94-bscode_length
   1778  f4c6				  -	      RORG	$FF94-bscode_length
   1779  f4c6				  -	      endif
   1780  f4c6				  -	      if	bankswitch == 16
   1781  f4c6				  -	      ORG	$4F94-bscode_length
   1782  f4c6				  -	      RORG	$FF94-bscode_length
   1783  f4c6				  -	      endif
   1784  f4c6				  -	      if	bankswitch == 32
   1785  f4c6				  -	      ORG	$8F94-bscode_length
   1786  f4c6				  -	      RORG	$FF94-bscode_length
   1787  f4c6				  -	      endif
   1788  f4c6				  -	      if	bankswitch == 64
   1789  f4c6				  -	      ORG	$10F80-bscode_length
   1790  f4c6				  -	      RORG	$1FF80-bscode_length
   1791  f4c6				  -	      endif
   1792  f4c6					      else
   1793  ff9c					      ORG	$FF9C
   1794  ff9c					      endif
   1795  ff9c					      endif
   1796  ff9c
   1797  ff9c							; font equates
   1798  ff9c		       00 01	   .21stcentury =	1
   1799  ff9c		       00 02	   alarmclock =	2
   1800  ff9c		       00 03	   handwritten =	3
   1801  ff9c		       00 04	   interrupted =	4
   1802  ff9c		       00 05	   retroputer =	5
   1803  ff9c		       00 06	   whimsey    =	6
   1804  ff9c		       00 07	   tiny       =	7
   1805  ff9c
   1806  ff9c				   scoretable
   1807  ff9c
   1808  ff9c				  -	      ifconst	font
   1809  ff9c				  -	      if	font == .21stcentury
   1810  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   1811  ff9c				  -	      endif
   1812  ff9c				  -	      if	font == alarmclock
   1813  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   1814  ff9c				  -	      endif
   1815  ff9c				  -	      if	font == handwritten
   1816  ff9c				  -	      include	"score_graphics.asm.handwritten"
   1817  ff9c				  -	      endif
   1818  ff9c				  -	      if	font == interrupted
   1819  ff9c				  -	      include	"score_graphics.asm.interrupted"
   1820  ff9c				  -	      endif
   1821  ff9c				  -	      if	font == retroputer
   1822  ff9c				  -	      include	"score_graphics.asm.retroputer"
   1823  ff9c				  -	      endif
   1824  ff9c				  -	      if	font == whimsey
   1825  ff9c				  -	      include	"score_graphics.asm.whimsey"
   1826  ff9c				  -	      endif
   1827  ff9c				  -	      if	font == tiny
   1828  ff9c				  -	      include	"score_graphics.asm.tiny"
   1829  ff9c				  -	      endif
   1830  ff9c					      else		; default font
   1831  ff9c
   1832  ff9c		       3c		      .byte.b	%00111100
   1833  ff9d		       66		      .byte.b	%01100110
   1834  ff9e		       66		      .byte.b	%01100110
   1835  ff9f		       66		      .byte.b	%01100110
   1836  ffa0		       66		      .byte.b	%01100110
   1837  ffa1		       66		      .byte.b	%01100110
   1838  ffa2		       66		      .byte.b	%01100110
   1839  ffa3		       3c		      .byte.b	%00111100
   1840  ffa4
   1841  ffa4		       7e		      .byte.b	%01111110
   1842  ffa5		       18		      .byte.b	%00011000
   1843  ffa6		       18		      .byte.b	%00011000
   1844  ffa7		       18		      .byte.b	%00011000
   1845  ffa8		       18		      .byte.b	%00011000
   1846  ffa9		       38		      .byte.b	%00111000
   1847  ffaa		       18		      .byte.b	%00011000
   1848  ffab		       08		      .byte.b	%00001000
   1849  ffac
   1850  ffac		       7e		      .byte.b	%01111110
   1851  ffad		       60		      .byte.b	%01100000
   1852  ffae		       60		      .byte.b	%01100000
   1853  ffaf		       3c		      .byte.b	%00111100
   1854  ffb0		       06		      .byte.b	%00000110
   1855  ffb1		       06		      .byte.b	%00000110
   1856  ffb2		       46		      .byte.b	%01000110
   1857  ffb3		       3c		      .byte.b	%00111100
   1858  ffb4
   1859  ffb4		       3c		      .byte.b	%00111100
   1860  ffb5		       46		      .byte.b	%01000110
   1861  ffb6		       06		      .byte.b	%00000110
   1862  ffb7		       06		      .byte.b	%00000110
   1863  ffb8		       1c		      .byte.b	%00011100
   1864  ffb9		       06		      .byte.b	%00000110
   1865  ffba		       46		      .byte.b	%01000110
   1866  ffbb		       3c		      .byte.b	%00111100
   1867  ffbc
   1868  ffbc		       0c		      .byte.b	%00001100
   1869  ffbd		       0c		      .byte.b	%00001100
   1870  ffbe		       7e		      .byte.b	%01111110
   1871  ffbf		       4c		      .byte.b	%01001100
   1872  ffc0		       4c		      .byte.b	%01001100
   1873  ffc1		       2c		      .byte.b	%00101100
   1874  ffc2		       1c		      .byte.b	%00011100
   1875  ffc3		       0c		      .byte.b	%00001100
   1876  ffc4
   1877  ffc4		       3c		      .byte.b	%00111100
   1878  ffc5		       46		      .byte.b	%01000110
   1879  ffc6		       06		      .byte.b	%00000110
   1880  ffc7		       06		      .byte.b	%00000110
   1881  ffc8		       3c		      .byte.b	%00111100
   1882  ffc9		       60		      .byte.b	%01100000
   1883  ffca		       60		      .byte.b	%01100000
   1884  ffcb		       7e		      .byte.b	%01111110
   1885  ffcc
   1886  ffcc		       3c		      .byte.b	%00111100
   1887  ffcd		       66		      .byte.b	%01100110
   1888  ffce		       66		      .byte.b	%01100110
   1889  ffcf		       66		      .byte.b	%01100110
   1890  ffd0		       7c		      .byte.b	%01111100
   1891  ffd1		       60		      .byte.b	%01100000
   1892  ffd2		       62		      .byte.b	%01100010
   1893  ffd3		       3c		      .byte.b	%00111100
   1894  ffd4
   1895  ffd4		       30		      .byte.b	%00110000
   1896  ffd5		       30		      .byte.b	%00110000
   1897  ffd6		       30		      .byte.b	%00110000
   1898  ffd7		       18		      .byte.b	%00011000
   1899  ffd8		       0c		      .byte.b	%00001100
   1900  ffd9		       06		      .byte.b	%00000110
   1901  ffda		       42		      .byte.b	%01000010
   1902  ffdb		       3e		      .byte.b	%00111110
   1903  ffdc
   1904  ffdc		       3c		      .byte.b	%00111100
   1905  ffdd		       66		      .byte.b	%01100110
   1906  ffde		       66		      .byte.b	%01100110
   1907  ffdf		       66		      .byte.b	%01100110
   1908  ffe0		       3c		      .byte.b	%00111100
   1909  ffe1		       66		      .byte.b	%01100110
   1910  ffe2		       66		      .byte.b	%01100110
   1911  ffe3		       3c		      .byte.b	%00111100
   1912  ffe4
   1913  ffe4		       3c		      .byte.b	%00111100
   1914  ffe5		       46		      .byte.b	%01000110
   1915  ffe6		       06		      .byte.b	%00000110
   1916  ffe7		       3e		      .byte.b	%00111110
   1917  ffe8		       66		      .byte.b	%01100110
   1918  ffe9		       66		      .byte.b	%01100110
   1919  ffea		       66		      .byte.b	%01100110
   1920  ffeb		       3c		      .byte.b	%00111100
   1921  ffec
   1922  ffec					      ifnconst	DPC_kernel_options
   1923  ffec
   1924  ffec		       00		      .byte.b	%00000000
   1925  ffed		       00		      .byte.b	%00000000
   1926  ffee		       00		      .byte.b	%00000000
   1927  ffef		       00		      .byte.b	%00000000
   1928  fff0		       00		      .byte.b	%00000000
   1929  fff1		       00		      .byte.b	%00000000
   1930  fff2		       00		      .byte.b	%00000000
   1931  fff3		       00		      .byte.b	%00000000
   1932  fff4
   1933  fff4					      endif
   1934  fff4
   1935  fff4					      endif
   1936  fff4
   1937  fff4				  -	      ifconst	ROM2k
   1938  fff4				  -	      ORG	$F7FC
   1939  fff4					      else
   1940  fff4				  -	      ifconst	bankswitch
   1941  fff4				  -	      if	bankswitch == 8
   1942  fff4				  -	      ORG	$2FF4-bscode_length
   1943  fff4				  -	      RORG	$FFF4-bscode_length
   1944  fff4				  -	      endif
   1945  fff4				  -	      if	bankswitch == 16
   1946  fff4				  -	      ORG	$4FF4-bscode_length
   1947  fff4				  -	      RORG	$FFF4-bscode_length
   1948  fff4				  -	      endif
   1949  fff4				  -	      if	bankswitch == 32
   1950  fff4				  -	      ORG	$8FF4-bscode_length
   1951  fff4				  -	      RORG	$FFF4-bscode_length
   1952  fff4				  -	      endif
   1953  fff4				  -	      if	bankswitch == 64
   1954  fff4				  -	      ORG	$10FE0-bscode_length
   1955  fff4				  -	      RORG	$1FFE0-bscode_length
   1956  fff4				  -	      endif
   1957  fff4					      else
   1958  fffc					      ORG	$FFFC
   1959  fffc					      endif
   1960  fffc					      endif
   1961  fffc				  -	      ifconst	bankswitch
   1962  fffc				  -	      if	bankswitch == 8
   1963  fffc				  -	      ORG	$2FFC
   1964  fffc				  -	      RORG	$FFFC
   1965  fffc				  -	      endif
   1966  fffc				  -	      if	bankswitch == 16
   1967  fffc				  -	      ORG	$4FFC
   1968  fffc				  -	      RORG	$FFFC
   1969  fffc				  -	      endif
   1970  fffc				  -	      if	bankswitch == 32
   1971  fffc				  -	      ORG	$8FFC
   1972  fffc				  -	      RORG	$FFFC
   1973  fffc				  -	      endif
   1974  fffc				  -	      if	bankswitch == 64
   1975  fffc				  -	      ORG	$10FF0
   1976  fffc				  -	      RORG	$1FFF0
   1977  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   1978  fffc				  -	      ORG	$10FF8
   1979  fffc				  -	      RORG	$1FFF8
   1980  fffc				  -	      ifconst	superchip
   1981  fffc				  -	      .byte	"E","F","S","C"
   1982  fffc				  -	      else
   1983  fffc				  -	      .byte	"E","F","E","F"
   1984  fffc				  -	      endif
   1985  fffc				  -	      ORG	$10FFC
   1986  fffc				  -	      RORG	$1FFFC
   1987  fffc				  -	      endif
   1988  fffc					      else
   1989  fffc				  -	      ifconst	ROM2k
   1990  fffc				  -	      ORG	$F7FC
   1991  fffc					      else
   1992  fffc					      ORG	$FFFC
   1993  fffc					      endif
   1994  fffc					      endif
   1995  fffc		       00 f0		      .word.w	start
   1996  fffe		       00 f0		      .word.w	start
